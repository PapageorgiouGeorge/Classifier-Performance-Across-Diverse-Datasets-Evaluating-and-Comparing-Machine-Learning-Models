{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Using the Breast Cancer Wisconsin (Diagnostic) Data Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the dataset\n",
    "from sklearn.datasets import load_breast_cancer\n",
    "cancer = load_breast_cancer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ".. _breast_cancer_dataset:\n",
      "\n",
      "Breast cancer wisconsin (diagnostic) dataset\n",
      "--------------------------------------------\n",
      "\n",
      "**Data Set Characteristics:**\n",
      "\n",
      "    :Number of Instances: 569\n",
      "\n",
      "    :Number of Attributes: 30 numeric, predictive attributes and the class\n",
      "\n",
      "    :Attribute Information:\n",
      "        - radius (mean of distances from center to points on the perimeter)\n",
      "        - texture (standard deviation of gray-scale values)\n",
      "        - perimeter\n",
      "        - area\n",
      "        - smoothness (local variation in radius lengths)\n",
      "        - compactness (perimeter^2 / area - 1.0)\n",
      "        - concavity (severity of concave portions of the contour)\n",
      "        - concave points (number of concave portions of the contour)\n",
      "        - symmetry\n",
      "        - fractal dimension (\"coastline approximation\" - 1)\n",
      "\n",
      "        The mean, standard error, and \"worst\" or largest (mean of the three\n",
      "        worst/largest values) of these features were computed for each image,\n",
      "        resulting in 30 features.  For instance, field 0 is Mean Radius, field\n",
      "        10 is Radius SE, field 20 is Worst Radius.\n",
      "\n",
      "        - class:\n",
      "                - WDBC-Malignant\n",
      "                - WDBC-Benign\n",
      "\n",
      "    :Summary Statistics:\n",
      "\n",
      "    ===================================== ====== ======\n",
      "                                           Min    Max\n",
      "    ===================================== ====== ======\n",
      "    radius (mean):                        6.981  28.11\n",
      "    texture (mean):                       9.71   39.28\n",
      "    perimeter (mean):                     43.79  188.5\n",
      "    area (mean):                          143.5  2501.0\n",
      "    smoothness (mean):                    0.053  0.163\n",
      "    compactness (mean):                   0.019  0.345\n",
      "    concavity (mean):                     0.0    0.427\n",
      "    concave points (mean):                0.0    0.201\n",
      "    symmetry (mean):                      0.106  0.304\n",
      "    fractal dimension (mean):             0.05   0.097\n",
      "    radius (standard error):              0.112  2.873\n",
      "    texture (standard error):             0.36   4.885\n",
      "    perimeter (standard error):           0.757  21.98\n",
      "    area (standard error):                6.802  542.2\n",
      "    smoothness (standard error):          0.002  0.031\n",
      "    compactness (standard error):         0.002  0.135\n",
      "    concavity (standard error):           0.0    0.396\n",
      "    concave points (standard error):      0.0    0.053\n",
      "    symmetry (standard error):            0.008  0.079\n",
      "    fractal dimension (standard error):   0.001  0.03\n",
      "    radius (worst):                       7.93   36.04\n",
      "    texture (worst):                      12.02  49.54\n",
      "    perimeter (worst):                    50.41  251.2\n",
      "    area (worst):                         185.2  4254.0\n",
      "    smoothness (worst):                   0.071  0.223\n",
      "    compactness (worst):                  0.027  1.058\n",
      "    concavity (worst):                    0.0    1.252\n",
      "    concave points (worst):               0.0    0.291\n",
      "    symmetry (worst):                     0.156  0.664\n",
      "    fractal dimension (worst):            0.055  0.208\n",
      "    ===================================== ====== ======\n",
      "\n",
      "    :Missing Attribute Values: None\n",
      "\n",
      "    :Class Distribution: 212 - Malignant, 357 - Benign\n",
      "\n",
      "    :Creator:  Dr. William H. Wolberg, W. Nick Street, Olvi L. Mangasarian\n",
      "\n",
      "    :Donor: Nick Street\n",
      "\n",
      "    :Date: November, 1995\n",
      "\n",
      "This is a copy of UCI ML Breast Cancer Wisconsin (Diagnostic) datasets.\n",
      "https://goo.gl/U2Uwz2\n",
      "\n",
      "Features are computed from a digitized image of a fine needle\n",
      "aspirate (FNA) of a breast mass.  They describe\n",
      "characteristics of the cell nuclei present in the image.\n",
      "\n",
      "Separating plane described above was obtained using\n",
      "Multisurface Method-Tree (MSM-T) [K. P. Bennett, \"Decision Tree\n",
      "Construction Via Linear Programming.\" Proceedings of the 4th\n",
      "Midwest Artificial Intelligence and Cognitive Science Society,\n",
      "pp. 97-101, 1992], a classification method which uses linear\n",
      "programming to construct a decision tree.  Relevant features\n",
      "were selected using an exhaustive search in the space of 1-4\n",
      "features and 1-3 separating planes.\n",
      "\n",
      "The actual linear program used to obtain the separating plane\n",
      "in the 3-dimensional space is that described in:\n",
      "[K. P. Bennett and O. L. Mangasarian: \"Robust Linear\n",
      "Programming Discrimination of Two Linearly Inseparable Sets\",\n",
      "Optimization Methods and Software 1, 1992, 23-34].\n",
      "\n",
      "This database is also available through the UW CS ftp server:\n",
      "\n",
      "ftp ftp.cs.wisc.edu\n",
      "cd math-prog/cpo-dataset/machine-learn/WDBC/\n",
      "\n",
      ".. topic:: References\n",
      "\n",
      "   - W.N. Street, W.H. Wolberg and O.L. Mangasarian. Nuclear feature extraction \n",
      "     for breast tumor diagnosis. IS&T/SPIE 1993 International Symposium on \n",
      "     Electronic Imaging: Science and Technology, volume 1905, pages 861-870,\n",
      "     San Jose, CA, 1993.\n",
      "   - O.L. Mangasarian, W.N. Street and W.H. Wolberg. Breast cancer diagnosis and \n",
      "     prognosis via linear programming. Operations Research, 43(4), pages 570-577, \n",
      "     July-August 1995.\n",
      "   - W.H. Wolberg, W.N. Street, and O.L. Mangasarian. Machine learning techniques\n",
      "     to diagnose breast cancer from fine-needle aspirates. Cancer Letters 77 (1994) \n",
      "     163-171.\n"
     ]
    }
   ],
   "source": [
    "# Display a description of the dataset: 30 features, 569 training examples (or, traning instances).\n",
    "print(cancer.DESCR)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 1 0 0 0 0 0 0 0 0 1 0 1 1 1 1 1 0 0 1 0 0 1 1 1 1 0 1 0 0 1 1 1 1 0 1 0 0\n",
      " 1 0 1 0 0 1 1 1 0 0 1 0 0 0 1 1 1 0 1 1 0 0 1 1 1 0 0 1 1 1 1 0 1 1 0 1 1\n",
      " 1 1 1 1 1 1 0 0 0 1 0 0 1 1 1 0 0 1 0 1 0 0 1 0 0 1 1 0 1 1 0 1 1 1 1 0 1\n",
      " 1 1 1 1 1 1 1 1 0 1 1 1 1 0 0 1 0 1 1 0 0 1 1 0 0 1 1 1 1 0 1 1 0 0 0 1 0\n",
      " 1 0 1 1 1 0 1 1 0 0 1 0 0 0 0 1 0 0 0 1 0 1 0 1 1 0 1 0 0 0 0 1 1 0 0 1 1\n",
      " 1 0 1 1 1 1 1 0 0 1 1 0 1 1 0 0 1 0 1 1 1 1 0 1 1 1 1 1 0 1 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 1 1 1 1 1 1 0 1 0 1 1 0 1 1 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1\n",
      " 1 0 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 0 1 1 1 1 0 0 0 1 1\n",
      " 1 1 0 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 0 0\n",
      " 0 1 0 0 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 1 1 1 1 1 1\n",
      " 1 0 1 1 1 1 1 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 1 0 1 1 1 1 1 0 1 1\n",
      " 0 1 0 1 1 0 1 0 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1\n",
      " 1 1 1 1 1 1 0 1 0 1 1 0 1 1 1 1 1 0 0 1 0 1 0 1 1 1 1 1 0 1 1 0 1 0 1 0 0\n",
      " 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
      " 1 1 1 1 1 1 1 0 0 0 0 0 0 1]\n"
     ]
    }
   ],
   "source": [
    "# print the target variables (i.e. a binary decision which determines the type of cancer: 0: malignant, 1: benign)\n",
    "print(cancer.target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Class labels: [0 1]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "\n",
    "print('Class labels:', np.unique(cancer.target))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "train_set, test_set, train_labels, test_labels = train_test_split(\n",
    "                              cancer.data,               # features\n",
    "                              cancer.target,             # labels\n",
    "                              test_size = 0.30,          # split ratio\n",
    "                              random_state = 1,          # set random seed\n",
    "                              stratify = cancer.target)  # randomize based on labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Labels count in y: [212 357]\n",
      "Labels count in y_train: [148 250]\n",
      "Labels count in y_test: [ 64 107]\n"
     ]
    }
   ],
   "source": [
    "print('Labels count in y:', np.bincount(cancer.target))\n",
    "print('Labels count in y_train:', np.bincount(train_labels))\n",
    "print('Labels count in y_test:', np.bincount(test_labels))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# No normalization (use raw features)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(max_iter=3000)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import linear_model\n",
    "x = train_set[:,0:30]         # mean radius\n",
    "y = train_labels              # 0: malignant, 1: benign\n",
    "\n",
    "log_regress = linear_model.LogisticRegression(max_iter = 3000)\n",
    "log_regress.fit(X = x, y = y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[35.49300862]\n",
      "[[ 0.68003054  0.29467651 -0.39620158  0.03558384 -0.07558104 -0.12967257\n",
      "  -0.36015378 -0.18032223 -0.23042655 -0.00782287 -0.09642873  0.77307667\n",
      "   0.33032019 -0.14313638 -0.0051428   0.03102456 -0.03275099 -0.02697239\n",
      "  -0.03093371  0.00329767  0.28187101 -0.49802085 -0.11138378 -0.01504132\n",
      "  -0.18293353 -0.59388635 -1.15128875 -0.45235123 -0.66493988 -0.0680839 ]]\n"
     ]
    }
   ],
   "source": [
    "print(log_regress.intercept_)     #\n",
    "print(log_regress.coef_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Malignant        Benign  Prediction  Original Result\n",
      "0   1.000000  5.777988e-12           0                0\n",
      "1   0.195253  8.047475e-01           1                1\n",
      "2   0.000018  9.999819e-01           1                1\n",
      "3   0.999997  2.592540e-06           0                0\n",
      "4   0.999138  8.615429e-04           0                0\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "#---get the predicted probablities and convert into a dataframe---\n",
    "preds_prob = pd.DataFrame(log_regress.predict_proba(X=test_set))\n",
    "\n",
    "#---assign column names to prediction---\n",
    "preds_prob.columns = [\"Malignant\", \"Benign\"]\n",
    "\n",
    "#---get the predicted class labels---\n",
    "preds = log_regress.predict(X=test_set)\n",
    "preds_class = pd.DataFrame(preds)\n",
    "preds_class.columns = [\"Prediction\"]\n",
    "\n",
    "#---actual diagnosis---\n",
    "original_result = pd.DataFrame(test_labels)\n",
    "original_result.columns = [\"Original Result\"]\n",
    "\n",
    "#---merge the three dataframes into one---\n",
    "result = pd.concat([preds_prob, preds_class, original_result], axis=1)\n",
    "print(result.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---Confusion Matrix---\n",
      "col_0   0    1\n",
      "row_0         \n",
      "0      59    3\n",
      "1       5  104\n"
     ]
    }
   ],
   "source": [
    "#---generate table of predictions vs actual---\n",
    "print(\"---Confusion Matrix---\")\n",
    "print(pd.crosstab(preds, test_labels))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 59   5]\n",
      " [  3 104]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "#---view the confusion matrix---\n",
    "print(metrics.confusion_matrix(y_true = test_labels,  # True labels\n",
    "                               y_pred = preds))       # Predicted labels\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.9532163742690059\n"
     ]
    }
   ],
   "source": [
    "#𝑀1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_logre_nonorm = accuracy_score(test_labels, preds)\n",
    "print('Accuracy : ' ,acc_logre_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-Score :  0.9530616665119588\n"
     ]
    }
   ],
   "source": [
    "#𝑀2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_logre_nonorm = f1_score(test_labels, preds, average='weighted')\n",
    "print('F1-Score : ',f1_logre_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  0.04678362573099415\n"
     ]
    }
   ],
   "source": [
    "#𝑀3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_logre_nonorm = mean_squared_error(test_labels, preds)\n",
    "print('Mean Squared Error : ', mse_logre_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.04678362573099415\n"
     ]
    }
   ],
   "source": [
    "#𝑀4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "y_true = test_labels\n",
    "y_pred = preds\n",
    "hamloss_logre_nonorm = hamming_loss(test_labels, preds)\n",
    "print('Hamming Loss : ' ,hamloss_logre_nonorm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Perceptron"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Perceptron(eta0=0.1, random_state=1)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import Perceptron\n",
    "ppn = Perceptron(eta0=0.1, random_state=1)\n",
    "ppn.fit(train_set, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 40\n"
     ]
    }
   ],
   "source": [
    "y_pred = ppn.predict(test_set)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.7660818713450293\n"
     ]
    }
   ],
   "source": [
    "#𝑀1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_perc_nonorm = accuracy_score(test_labels, y_pred)\n",
    "print('Accuracy : ' , acc_perc_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-Score :  0.7670421263887688\n"
     ]
    }
   ],
   "source": [
    "#𝑀2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_perc_nonorm = f1_score(test_labels, y_pred, average='weighted')\n",
    "print('F1-Score : ', f1_perc_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared error :  0.23391812865497075\n"
     ]
    }
   ],
   "source": [
    "#𝑀3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_perc_nonorm = mean_squared_error(test_labels, y_pred)\n",
    "print('Mean Squared error : ', mse_perc_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.23391812865497075\n"
     ]
    }
   ],
   "source": [
    "#𝑀4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_perc_nonorm = hamming_loss(test_labels, y_pred)\n",
    "print('Hamming Loss : ', hamloss_perc_nonorm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  Support Vector Machines"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### With Linear Kernel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(kernel='linear', random_state=1)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "svm = SVC(kernel='linear', C=1.0, random_state=1)\n",
    "svm.fit(train_set, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 8\n"
     ]
    }
   ],
   "source": [
    "y_pred = svm.predict(test_set)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.9532163742690059\n"
     ]
    }
   ],
   "source": [
    "#𝑀1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_svm_lk_nonorm = accuracy_score(test_labels, y_pred)\n",
    "print('Accuracy : ' ,acc_svm_lk_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-Score :  0.9532163742690059\n"
     ]
    }
   ],
   "source": [
    "#𝑀2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_svm_lk_nonorm = f1_score(test_labels, y_pred, average='weighted')\n",
    "print('F1-Score : ', f1_svm_lk_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  0.04678362573099415\n"
     ]
    }
   ],
   "source": [
    "#𝑀3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_svm_lk_nonorm = mean_squared_error(test_labels, y_pred)\n",
    "print('Mean Squared Error : ', mse_svm_lk_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.04678362573099415\n"
     ]
    }
   ],
   "source": [
    "#𝑀4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_svm_lk_nonorm = hamming_loss(test_labels, y_pred)\n",
    "print('Hamming Loss : ',hamloss_svm_lk_nonorm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### With RBF Kernel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(random_state=1)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "svm = SVC(kernel='rbf', C=1.0, random_state=1)\n",
    "svm.fit(train_set, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 13\n"
     ]
    }
   ],
   "source": [
    "y_pred = svm.predict(test_set)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.9239766081871345\n"
     ]
    }
   ],
   "source": [
    "#𝑀1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_svm_rbf_nonorm = accuracy_score(test_labels, y_pred)\n",
    "print('Accuracy : ', acc_svm_rbf_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-score : 0.9229815748250872\n"
     ]
    }
   ],
   "source": [
    "#𝑀2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_svm_rbf_nonorm = f1_score(test_labels, y_pred, average='weighted')\n",
    "print('F1-score :',f1_svm_rbf_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  0.07602339181286549\n"
     ]
    }
   ],
   "source": [
    "#𝑀3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_svm_rbf_nonorm = mean_squared_error(test_labels, y_pred)\n",
    "print('Mean Squared Error : ',mse_svm_rbf_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.07602339181286549\n"
     ]
    }
   ],
   "source": [
    "#𝑀4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_svm_rbf_nonorm = hamming_loss(test_labels, y_pred)\n",
    "print('Hamming Loss : ',hamloss_svm_rbf_nonorm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(max_depth=4, random_state=1)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "\n",
    "# Build a decision tree for classification tasks\n",
    "# citerion:  The function to measure the quality of a split. \n",
    "# max_depth: The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or\n",
    "#            until all leaves contain less than min_samples_split samples.\n",
    "# min_samples_split: The minimum number of samples required to split an internal node.\n",
    "# min_samples_leaf:  The minimum number of samples required to to be at a leaf node.\n",
    "tree_model = DecisionTreeClassifier(criterion = 'gini', max_depth = 4, random_state = 1)\n",
    "tree_model.fit(train_set, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 10\n"
     ]
    }
   ],
   "source": [
    "y_pred = tree_model.predict(test_set)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.9415204678362573\n"
     ]
    }
   ],
   "source": [
    "#𝑀1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_dtree_nonorm = accuracy_score(test_labels, y_pred)\n",
    "print('Accuracy : ', acc_dtree_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-score : 0.9416944635415341\n"
     ]
    }
   ],
   "source": [
    "#𝑀2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_dtree_nonorm = f1_score(test_labels, y_pred, average='weighted')\n",
    "print('F1-score :',f1_dtree_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  0.05847953216374269\n"
     ]
    }
   ],
   "source": [
    "#𝑀3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_dtree_nonorm = mean_squared_error(test_labels, y_pred)\n",
    "print('Mean Squared Error : ',mse_dtree_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.05847953216374269\n"
     ]
    }
   ],
   "source": [
    "#𝑀4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_dtree_nonorm = hamming_loss(test_labels, y_pred)\n",
    "print('Hamming Loss : ',hamloss_dtree_nonorm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Random Forests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(n_estimators=25, n_jobs=-1, random_state=1)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "# Create a Random Forest comprised of 25 decision trees\n",
    "# citerion:  The function to measure the quality of a split. \n",
    "# max_depth: The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or\n",
    "#            until all leaves contain less than min_samples_split samples.\n",
    "# min_samples_split: The minimum number of samples required to split an internal node.\n",
    "# min_samples_leaf:  The minimum number of samples required to to be at a leaf node.\n",
    "forest = RandomForestClassifier(criterion='gini', n_estimators=25, random_state=1, n_jobs=-1)\n",
    "forest.fit(train_set, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 9\n"
     ]
    }
   ],
   "source": [
    "y_pred = forest.predict(test_set)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.9473684210526315\n"
     ]
    }
   ],
   "source": [
    "#𝑀1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_rforest_nonorm = accuracy_score(test_labels, y_pred)\n",
    "print('Accuracy : ', acc_rforest_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-score : 0.9472836091327017\n"
     ]
    }
   ],
   "source": [
    "#𝑀2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_rforest_nonorm = f1_score(test_labels, y_pred, average='weighted')\n",
    "print('F1-score :',f1_rforest_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  0.05263157894736842\n"
     ]
    }
   ],
   "source": [
    "#𝑀3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_rforest_nonorm = mean_squared_error(test_labels, y_pred)\n",
    "print('Mean Squared Error : ',mse_rforest_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.05263157894736842\n"
     ]
    }
   ],
   "source": [
    "#𝑀4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_rforest_nonorm = hamming_loss(test_labels, y_pred)\n",
    "print('Hamming Loss : ',hamloss_rforest_nonorm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Feed-forward Neural Network with two hidden layers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MLPClassifier(alpha=0.3, hidden_layer_sizes=(10, 11), max_iter=1000)"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.neural_network import MLPClassifier\n",
    "mlp = MLPClassifier(activation='relu', hidden_layer_sizes=(10,11), alpha = 0.3, max_iter = 1000)\n",
    "\n",
    "mlp.fit(train_set, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 10\n"
     ]
    }
   ],
   "source": [
    "y_pred = mlp.predict(test_set)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.9415204678362573\n"
     ]
    }
   ],
   "source": [
    "#𝑀1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_nnet_nonorm = accuracy_score(test_labels, y_pred)\n",
    "print('Accuracy : ', acc_nnet_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-score : 0.9413270831399486\n"
     ]
    }
   ],
   "source": [
    "#𝑀2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_nnet_nonorm = f1_score(test_labels, y_pred, average='weighted')\n",
    "print('F1-score :',f1_nnet_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  0.05847953216374269\n"
     ]
    }
   ],
   "source": [
    "#𝑀3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_nnet_nonorm = mean_squared_error(test_labels, y_pred)\n",
    "print('Mean Squared Error : ',mse_nnet_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.05847953216374269\n"
     ]
    }
   ],
   "source": [
    "#𝑀4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_nnet_nonorm = hamming_loss(test_labels, y_pred)\n",
    "print('Hamming Loss : ',hamloss_nnet_nonorm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Feature Standardization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "stdsc = StandardScaler()\n",
    "train_set_std = stdsc.fit_transform(train_set)\n",
    "test_set_std = stdsc.transform(test_set)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(max_iter=3000)"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import linear_model\n",
    "x = train_set_std[:,0:30]         # mean radius\n",
    "y = train_labels              # 0: malignant, 1: benign\n",
    "\n",
    "log_regress = linear_model.LogisticRegression(max_iter = 3000)\n",
    "log_regress.fit(X = x, y = y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.44485144]\n",
      "[[-0.46429675 -0.47937365 -0.44811114 -0.50617848 -0.05641188  0.30780866\n",
      "  -0.76691852 -0.73262578 -0.1617013   0.51355147 -1.25231095 -0.21707389\n",
      "  -0.82887983 -0.78866439  0.25632426  0.85082258  0.1481093  -0.29823501\n",
      "   0.1437705   0.66691422 -0.86369835 -1.00277152 -0.71659299 -0.85876872\n",
      "  -0.5934016  -0.13721646 -1.0334982  -0.79276935 -0.96522428 -0.4068845 ]]\n"
     ]
    }
   ],
   "source": [
    "print(log_regress.intercept_)     #\n",
    "print(log_regress.coef_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Malignant        Benign  Prediction  Original Result\n",
      "0   1.000000  1.092682e-07           0                0\n",
      "1   0.092350  9.076503e-01           1                1\n",
      "2   0.000040  9.999603e-01           1                1\n",
      "3   1.000000  2.245465e-07           0                0\n",
      "4   0.995827  4.173175e-03           0                0\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "#---get the predicted probablities and convert into a dataframe---\n",
    "preds_prob = pd.DataFrame(log_regress.predict_proba(X=test_set_std))\n",
    "\n",
    "#---assign column names to prediction---\n",
    "preds_prob.columns = [\"Malignant\", \"Benign\"]\n",
    "\n",
    "#---get the predicted class labels---\n",
    "preds = log_regress.predict(X=test_set_std)\n",
    "preds_class = pd.DataFrame(preds)\n",
    "preds_class.columns = [\"Prediction\"]\n",
    "\n",
    "#---actual diagnosis---\n",
    "original_result = pd.DataFrame(test_labels)\n",
    "original_result.columns = [\"Original Result\"]\n",
    "\n",
    "#---merge the three dataframes into one---\n",
    "result = pd.concat([preds_prob, preds_class, original_result], axis=1)\n",
    "print(result.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---Confusion Matrix---\n",
      "col_0   0    1\n",
      "row_0         \n",
      "0      59    2\n",
      "1       5  105\n"
     ]
    }
   ],
   "source": [
    "#---generate table of predictions vs actual---\n",
    "print(\"---Confusion Matrix---\")\n",
    "print(pd.crosstab(preds, test_labels))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.9590643274853801\n"
     ]
    }
   ],
   "source": [
    "#𝑀1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_logre_norm = accuracy_score(test_labels, preds)\n",
    "print('Accuracy : ', acc_logre_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-Score :  0.9588560648934163\n"
     ]
    }
   ],
   "source": [
    "#𝑀2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_logre_norm = f1_score(test_labels, preds, average='weighted')\n",
    "print('F1-Score : ',f1_logre_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  0.04093567251461988\n"
     ]
    }
   ],
   "source": [
    "#𝑀3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_logre_norm = mean_squared_error(test_labels, preds)\n",
    "print('Mean Squared Error : ', mse_logre_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.04093567251461988\n"
     ]
    }
   ],
   "source": [
    "#𝑀4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_logre_norm = hamming_loss(test_labels, preds)\n",
    "print(\"Hamming Loss : \", hamloss_logre_norm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Perceptron"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Class labels: [0 1]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "\n",
    "print('Class labels:', np.unique(cancer.target))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Perceptron(eta0=0.1, random_state=1)"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import Perceptron\n",
    "ppn = Perceptron(eta0=0.1, random_state=1)\n",
    "ppn.fit(train_set_std, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 6\n"
     ]
    }
   ],
   "source": [
    "y_pred = ppn.predict(test_set_std)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.9649122807017544\n"
     ]
    }
   ],
   "source": [
    "#𝑀1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_perc_norm = accuracy_score(test_labels, y_pred)\n",
    "print('Accuracy : ', accuracy_score(test_labels, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-Score :  0.9645279368316471\n"
     ]
    }
   ],
   "source": [
    "##𝑀2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_perc_norm = f1_score(test_labels, y_pred, average='weighted')\n",
    "print('F1-Score : ' , f1_perc_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  0.03508771929824561\n"
     ]
    }
   ],
   "source": [
    "#𝑀3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_perc_norm = mean_squared_error(test_labels, y_pred)\n",
    "print('Mean Squared Error : ',mse_perc_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.03508771929824561\n"
     ]
    }
   ],
   "source": [
    "#𝑀4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_perc_norm = hamming_loss(test_labels, y_pred)\n",
    "print('Hamming Loss : ', hamloss_perc_norm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  Support Vector Machines"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### With Linear Kernel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(kernel='linear', random_state=1)"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "svm = SVC(kernel='linear', C=1.0, random_state=1)\n",
    "svm.fit(train_set_std, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 8\n"
     ]
    }
   ],
   "source": [
    "y_pred = svm.predict(test_set_std)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.9532163742690059\n"
     ]
    }
   ],
   "source": [
    "#𝑀1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_svm_lk_norm = accuracy_score(test_labels, y_pred)\n",
    "print('Accuracy : ' ,acc_svm_lk_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-Score :  0.9528910072359551\n"
     ]
    }
   ],
   "source": [
    "#𝑀2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_svm_lk_norm = f1_score(test_labels, y_pred, average='weighted')\n",
    "print('F1-Score : ', f1_svm_lk_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  0.04678362573099415\n"
     ]
    }
   ],
   "source": [
    "#𝑀3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_svm_lk_norm = mean_squared_error(test_labels, y_pred)\n",
    "print('Mean Squared Error : ',mse_svm_lk_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.04678362573099415\n"
     ]
    }
   ],
   "source": [
    "#𝑀4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_svm_lk_norm = hamming_loss(test_labels, y_pred)\n",
    "print('Hamming Loss : ',hamloss_svm_lk_norm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### With RBF Kernel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(random_state=1)"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "svm = SVC(kernel='rbf', C=1.0, random_state=1)\n",
    "svm.fit(train_set_std, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 4\n"
     ]
    }
   ],
   "source": [
    "y_pred = svm.predict(test_set_std)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.9766081871345029\n"
     ]
    }
   ],
   "source": [
    "#𝑀1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_svm_rbf_norm = accuracy_score(test_labels, y_pred)\n",
    "print('Accuracy : ' ,acc_svm_rbf_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-Score :  0.9764455036179777\n"
     ]
    }
   ],
   "source": [
    "#𝑀2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_svm_rbf_norm = f1_score(test_labels, y_pred, average='weighted')\n",
    "print('F1-Score : ',f1_svm_rbf_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  0.023391812865497075\n"
     ]
    }
   ],
   "source": [
    "#𝑀3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_svm_rbf_norm = mean_squared_error(test_labels, y_pred)\n",
    "print('Mean Squared Error : ',mse_svm_rbf_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming loss :  0.023391812865497075\n"
     ]
    }
   ],
   "source": [
    "#𝑀4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_svm_rbf_norm = hamming_loss(test_labels, y_pred)\n",
    "print('Hamming loss : ',hamloss_svm_rbf_norm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(max_depth=4, random_state=1)"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Decision Treefrom sklearn.tree import DecisionTreeClassifier\n",
    "\n",
    "# Build a decision tree for classification tasks\n",
    "# citerion:  The function to measure the quality of a split. \n",
    "# max_depth: The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or\n",
    "#            until all leaves contain less than min_samples_split samples.\n",
    "# min_samples_split: The minimum number of samples required to split an internal node.\n",
    "# min_samples_leaf:  The minimum number of samples required to to be at a leaf node.\n",
    "tree_model = DecisionTreeClassifier(criterion = 'gini', max_depth = 4, random_state = 1)\n",
    "tree_model.fit(train_set_std, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 11\n"
     ]
    }
   ],
   "source": [
    "y_pred = tree_model.predict(test_set_std)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.935672514619883\n"
     ]
    }
   ],
   "source": [
    "#𝑀1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_dtree_norm = accuracy_score(test_labels, y_pred)\n",
    "print('Accuracy : ', acc_dtree_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-score : 0.9357708424717578\n"
     ]
    }
   ],
   "source": [
    "#𝑀2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_dtree_norm = f1_score(test_labels, y_pred, average='weighted')\n",
    "print('F1-score :',f1_dtree_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  0.06432748538011696\n"
     ]
    }
   ],
   "source": [
    "#𝑀3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_dtree_norm = mean_squared_error(test_labels, y_pred)\n",
    "print('Mean Squared Error : ',mse_dtree_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.06432748538011696\n"
     ]
    }
   ],
   "source": [
    "#𝑀4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_dtree_norm = hamming_loss(test_labels, y_pred)\n",
    "print('Hamming Loss : ',hamloss_dtree_norm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Random Forests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(n_estimators=25, n_jobs=-1, random_state=1)"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "# Create a Random Forest comprised of 25 decision trees\n",
    "# citerion:  The function to measure the quality of a split. \n",
    "# max_depth: The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or\n",
    "#            until all leaves contain less than min_samples_split samples.\n",
    "# min_samples_split: The minimum number of samples required to split an internal node.\n",
    "# min_samples_leaf:  The minimum number of samples required to to be at a leaf node.\n",
    "forest = RandomForestClassifier(criterion='gini', n_estimators=25, random_state=1, n_jobs=-1)\n",
    "forest.fit(train_set_std, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 9\n"
     ]
    }
   ],
   "source": [
    "y_pred = y_pred = forest.predict(test_set_std)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.9473684210526315\n"
     ]
    }
   ],
   "source": [
    "#𝑀1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_rforest_norm = accuracy_score(test_labels, y_pred)\n",
    "print('Accuracy : ', acc_rforest_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-score : 0.9472836091327017\n"
     ]
    }
   ],
   "source": [
    "#𝑀2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_rforest_norm = f1_score(test_labels, y_pred, average='weighted')\n",
    "print('F1-score :',f1_rforest_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  0.05263157894736842\n"
     ]
    }
   ],
   "source": [
    "#𝑀3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_rforest_norm = mean_squared_error(test_labels, y_pred)\n",
    "print('Mean Squared Error : ',mse_rforest_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.05263157894736842\n"
     ]
    }
   ],
   "source": [
    "#𝑀4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_rforest_norm = hamming_loss(test_labels, y_pred)\n",
    "print('Hamming Loss : ',hamloss_rforest_norm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Feed-forward Neural Network with two hidden layers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MLPClassifier(alpha=0.3, hidden_layer_sizes=(10, 11), max_iter=1000)"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.neural_network import MLPClassifier\n",
    "mlp = MLPClassifier(activation='relu', hidden_layer_sizes=(10,11), alpha = 0.3, max_iter = 1000)\n",
    "\n",
    "mlp.fit(train_set_std, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 9\n"
     ]
    }
   ],
   "source": [
    "y_pred = mlp.predict(test_set_std)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.9473684210526315\n"
     ]
    }
   ],
   "source": [
    "#𝑀1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_nnet_norm = accuracy_score(test_labels, y_pred)\n",
    "print('Accuracy : ', acc_nnet_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-score : 0.9471006548629638\n"
     ]
    }
   ],
   "source": [
    "#𝑀2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_nnet_norm = f1_score(test_labels, y_pred, average='weighted')\n",
    "print('F1-score :',f1_nnet_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  0.05263157894736842\n"
     ]
    }
   ],
   "source": [
    "#𝑀3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_nnet_norm = mean_squared_error(test_labels, y_pred)\n",
    "print('Mean Squared Error : ',mse_nnet_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.05263157894736842\n"
     ]
    }
   ],
   "source": [
    "#𝑀4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_nnet_norm = hamming_loss(test_labels, y_pred)\n",
    "print('Hamming Loss : ',hamloss_nnet_norm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plots"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## No Normalazation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### IRIS Classification Accuracy Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "classifications = [acc_logre_nonorm, acc_perc_nonorm, acc_svm_lk_nonorm, acc_svm_rbf_nonorm, acc_dtree_nonorm, acc_rforest_nonorm, acc_nnet_nonorm]\n",
    "scores = ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network')\n",
    "y_pos = np.arange(len(scores))\n",
    "plt.barh(y_pos, classifications)\n",
    "plt.yticks(y_pos, scores)\n",
    "plt.xlabel('Scores')\n",
    "plt.ylabel('Classifiers')\n",
    "plt.title('Breast Cancer Classification Accuracy Metrics')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "classifications = [f1_logre_nonorm, f1_perc_nonorm, f1_svm_lk_nonorm, f1_svm_rbf_nonorm, f1_dtree_nonorm, f1_rforest_nonorm, f1_nnet_nonorm]\n",
    "scores = ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network')\n",
    "y_pos = np.arange(len(scores))\n",
    "plt.barh(y_pos, classifications)\n",
    "plt.yticks(y_pos, scores)\n",
    "plt.xlabel('Scores')\n",
    "plt.ylabel('Classifiers')\n",
    "plt.title('Breast Cancer F1-Score Metrics')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "classifications = [mse_logre_nonorm, mse_perc_nonorm, mse_svm_lk_nonorm, mse_svm_rbf_nonorm, mse_dtree_nonorm, mse_rforest_nonorm, mse_nnet_nonorm]\n",
    "scores = ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network')\n",
    "y_pos = np.arange(len(scores))\n",
    "plt.barh(y_pos, classifications)\n",
    "plt.yticks(y_pos, scores)\n",
    "plt.xlabel('Scores')\n",
    "plt.ylabel('Classifiers')\n",
    "plt.title('Breast Cancer Mean Squared Error Metrics')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "classifications = [hamloss_logre_nonorm, hamloss_perc_nonorm, hamloss_svm_lk_nonorm, hamloss_svm_rbf_nonorm, hamloss_dtree_nonorm, hamloss_rforest_nonorm, hamloss_nnet_nonorm]\n",
    "scores = ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network')\n",
    "y_pos = np.arange(len(scores))\n",
    "plt.barh(y_pos, classifications)\n",
    "plt.yticks(y_pos, scores)\n",
    "plt.xlabel('Scores')\n",
    "plt.ylabel('Classifiers')\n",
    "plt.title('Breast Cancer Hamming Loss Metrics')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Feature Standardization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### IRIS Classification Accuracy Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "classifications = [acc_logre_norm, acc_perc_norm, acc_svm_lk_norm, acc_svm_rbf_norm, acc_dtree_norm, acc_rforest_norm, acc_nnet_norm]\n",
    "scores = ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network')\n",
    "y_pos = np.arange(len(scores))\n",
    "plt.barh(y_pos, classifications)\n",
    "plt.yticks(y_pos, scores)\n",
    "plt.xlabel('Scores')\n",
    "plt.ylabel('Classifiers')\n",
    "plt.title('Breast Cancer Classification Accuracy Metrics')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "classifications = [f1_logre_norm, f1_perc_norm, f1_svm_lk_norm, f1_svm_rbf_norm, f1_dtree_norm, f1_rforest_norm, f1_nnet_norm]\n",
    "scores = ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network')\n",
    "y_pos = np.arange(len(scores))\n",
    "plt.barh(y_pos, classifications)\n",
    "plt.yticks(y_pos, scores)\n",
    "plt.xlabel('Scores')\n",
    "plt.ylabel('Classifiers')\n",
    "plt.title('Breast Cancer F1-Score Metrics')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "classifications = [mse_logre_norm, mse_perc_norm, mse_svm_lk_norm, mse_svm_rbf_norm, mse_dtree_norm, mse_rforest_norm, mse_nnet_norm]\n",
    "scores = ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network')\n",
    "y_pos = np.arange(len(scores))\n",
    "plt.barh(y_pos, classifications)\n",
    "plt.yticks(y_pos, scores)\n",
    "plt.xlabel('Scores')\n",
    "plt.ylabel('Classifiers')\n",
    "plt.title('Breast Cancer Mean Squared Error Metrics')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "classifications = [hamloss_logre_norm, hamloss_perc_norm, hamloss_svm_lk_norm, hamloss_svm_rbf_norm, hamloss_dtree_norm, hamloss_rforest_norm, hamloss_nnet_norm]\n",
    "scores = ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network')\n",
    "y_pos = np.arange(len(scores))\n",
    "plt.barh(y_pos, classifications)\n",
    "plt.yticks(y_pos, scores)\n",
    "plt.xlabel('Scores')\n",
    "plt.ylabel('Classifiers')\n",
    "plt.title('Breast Cancer Hamming Loss Metrics')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Comparison plots of the classifiers' performance"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### (Analysis in Notebook 7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# data to plot\n",
    "n_groups = 7\n",
    "No_Normalazation = (acc_logre_nonorm, acc_perc_nonorm, acc_svm_lk_nonorm, acc_svm_rbf_nonorm, acc_dtree_nonorm, acc_rforest_nonorm, acc_nnet_nonorm)\n",
    "Feature_Standardization = (acc_logre_norm, acc_perc_norm, acc_svm_lk_norm, acc_svm_rbf_norm, acc_dtree_norm, acc_rforest_norm, acc_nnet_norm)\n",
    "\n",
    "# create plot\n",
    "fig, ax = plt.subplots()\n",
    "index = np.arange(n_groups)\n",
    "bar_width = 0.25\n",
    "opacity = 0.8\n",
    "plt.ylim(0.70, 1.0)\n",
    "\n",
    "rects1 = plt.bar(index, No_Normalazation, bar_width,\n",
    "alpha=opacity,\n",
    "color='b',\n",
    "label='No Normalazation')\n",
    "\n",
    "rects2 = plt.bar(index + bar_width, Feature_Standardization, bar_width,\n",
    "alpha=opacity,\n",
    "color='g',\n",
    "label='Feature Standardization')\n",
    "\n",
    "plt.xlabel('Classifiers')\n",
    "plt.ylabel('Scores')\n",
    "plt.title('Breast Cancer Classification Accuracy Metrics')\n",
    "plt.xticks(index + bar_width, ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network'), rotation = 45)\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "# data to plot\n",
    "n_groups = 7\n",
    "No_Normalazation = (f1_logre_nonorm, f1_perc_nonorm, f1_svm_lk_nonorm, f1_svm_rbf_nonorm, f1_dtree_nonorm, f1_rforest_nonorm, f1_nnet_nonorm)\n",
    "Feature_Standardization = (f1_logre_norm, f1_perc_norm, f1_svm_lk_norm, f1_svm_rbf_norm, f1_dtree_norm, f1_rforest_norm, f1_nnet_norm)\n",
    "\n",
    "# create plot\n",
    "fig, ax = plt.subplots()\n",
    "index = np.arange(n_groups)\n",
    "bar_width = 0.25\n",
    "opacity = 0.8\n",
    "plt.ylim(0.70, 1.0)\n",
    "\n",
    "rects1 = plt.bar(index, No_Normalazation, bar_width,\n",
    "alpha=opacity,\n",
    "color='b',\n",
    "label='No Normalazation')\n",
    "\n",
    "rects2 = plt.bar(index + bar_width, Feature_Standardization, bar_width,\n",
    "alpha=opacity,\n",
    "color='g',\n",
    "label='Feature Standardization')\n",
    "\n",
    "plt.xlabel('Classifiers')\n",
    "plt.ylabel('Scores')\n",
    "plt.title('Breast Cancer F1-Score Metrics')\n",
    "plt.xticks(index + bar_width, ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network'), rotation = 45)\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "# data to plot\n",
    "n_groups = 7\n",
    "No_Normalazation = (mse_logre_nonorm, mse_perc_nonorm, mse_svm_lk_nonorm, mse_svm_rbf_nonorm, mse_dtree_nonorm, mse_rforest_nonorm, mse_nnet_nonorm)\n",
    "Feature_Standardization = (mse_logre_norm, mse_perc_norm, mse_svm_lk_norm, mse_svm_rbf_norm, mse_dtree_norm, mse_rforest_norm, mse_nnet_norm)\n",
    "\n",
    "# create plot\n",
    "fig, ax = plt.subplots()\n",
    "index = np.arange(n_groups)\n",
    "bar_width = 0.25\n",
    "opacity = 0.8\n",
    "\n",
    "\n",
    "rects1 = plt.bar(index, No_Normalazation, bar_width,\n",
    "alpha=opacity,\n",
    "color='b',\n",
    "label='No Normalazation')\n",
    "\n",
    "rects2 = plt.bar(index + bar_width, Feature_Standardization, bar_width,\n",
    "alpha=opacity,\n",
    "color='g',\n",
    "label='Feature Standardization')\n",
    "\n",
    "plt.xlabel('Classifiers')\n",
    "plt.ylabel('Scores')\n",
    "plt.title('Breast Cancer Mean Squared Error Metrics')\n",
    "plt.xticks(index + bar_width, ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network'), rotation = 45)\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "# data to plot\n",
    "n_groups = 7\n",
    "No_Normalazation = (hamloss_logre_nonorm, hamloss_perc_nonorm, hamloss_svm_lk_nonorm, hamloss_svm_rbf_nonorm, hamloss_dtree_nonorm, hamloss_rforest_nonorm, hamloss_nnet_nonorm)\n",
    "Feature_Standardization = (hamloss_logre_norm, hamloss_perc_norm, hamloss_svm_lk_norm, hamloss_svm_rbf_norm, hamloss_dtree_norm, hamloss_rforest_norm, hamloss_nnet_norm)\n",
    "\n",
    "# create plot\n",
    "fig, ax = plt.subplots()\n",
    "index = np.arange(n_groups)\n",
    "bar_width = 0.25\n",
    "opacity = 0.8\n",
    "\n",
    "\n",
    "rects1 = plt.bar(index, No_Normalazation, bar_width,\n",
    "alpha=opacity,\n",
    "color='b',\n",
    "label='No Normalazation')\n",
    "\n",
    "rects2 = plt.bar(index + bar_width, Feature_Standardization, bar_width,\n",
    "alpha=opacity,\n",
    "color='g',\n",
    "label='Feature Standardization')\n",
    "\n",
    "plt.xlabel('Classifiers')\n",
    "plt.ylabel('Scores')\n",
    "plt.title('Breast Cancer Hamming Loss Metrics')\n",
    "plt.xticks(index + bar_width, ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network'), rotation = 45)\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
