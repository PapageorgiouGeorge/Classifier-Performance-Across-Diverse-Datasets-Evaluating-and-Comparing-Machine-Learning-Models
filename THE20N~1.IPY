{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Using the The 20 newsgroups text (Vectorized) Data Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the dataset\n",
    "from sklearn.datasets import fetch_20newsgroups_vectorized\n",
    "newsgroups = fetch_20newsgroups_vectorized(normalize = False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ".. _20newsgroups_dataset:\n",
      "\n",
      "The 20 newsgroups text dataset\n",
      "------------------------------\n",
      "\n",
      "The 20 newsgroups dataset comprises around 18000 newsgroups posts on\n",
      "20 topics split in two subsets: one for training (or development)\n",
      "and the other one for testing (or for performance evaluation). The split\n",
      "between the train and test set is based upon a messages posted before\n",
      "and after a specific date.\n",
      "\n",
      "This module contains two loaders. The first one,\n",
      ":func:`sklearn.datasets.fetch_20newsgroups`,\n",
      "returns a list of the raw texts that can be fed to text feature\n",
      "extractors such as :class:`sklearn.feature_extraction.text.CountVectorizer`\n",
      "with custom parameters so as to extract feature vectors.\n",
      "The second one, :func:`sklearn.datasets.fetch_20newsgroups_vectorized`,\n",
      "returns ready-to-use features, i.e., it is not necessary to use a feature\n",
      "extractor.\n",
      "\n",
      "**Data Set Characteristics:**\n",
      "\n",
      "    =================   ==========\n",
      "    Classes                     20\n",
      "    Samples total            18846\n",
      "    Dimensionality               1\n",
      "    Features                  text\n",
      "    =================   ==========\n",
      "\n",
      "Usage\n",
      "~~~~~\n",
      "\n",
      "The :func:`sklearn.datasets.fetch_20newsgroups` function is a data\n",
      "fetching / caching functions that downloads the data archive from\n",
      "the original `20 newsgroups website`_, extracts the archive contents\n",
      "in the ``~/scikit_learn_data/20news_home`` folder and calls the\n",
      ":func:`sklearn.datasets.load_files` on either the training or\n",
      "testing set folder, or both of them::\n",
      "\n",
      "  >>> from sklearn.datasets import fetch_20newsgroups\n",
      "  >>> newsgroups_train = fetch_20newsgroups(subset='train')\n",
      "\n",
      "  >>> from pprint import pprint\n",
      "  >>> pprint(list(newsgroups_train.target_names))\n",
      "  ['alt.atheism',\n",
      "   'comp.graphics',\n",
      "   'comp.os.ms-windows.misc',\n",
      "   'comp.sys.ibm.pc.hardware',\n",
      "   'comp.sys.mac.hardware',\n",
      "   'comp.windows.x',\n",
      "   'misc.forsale',\n",
      "   'rec.autos',\n",
      "   'rec.motorcycles',\n",
      "   'rec.sport.baseball',\n",
      "   'rec.sport.hockey',\n",
      "   'sci.crypt',\n",
      "   'sci.electronics',\n",
      "   'sci.med',\n",
      "   'sci.space',\n",
      "   'soc.religion.christian',\n",
      "   'talk.politics.guns',\n",
      "   'talk.politics.mideast',\n",
      "   'talk.politics.misc',\n",
      "   'talk.religion.misc']\n",
      "\n",
      "The real data lies in the ``filenames`` and ``target`` attributes. The target\n",
      "attribute is the integer index of the category::\n",
      "\n",
      "  >>> newsgroups_train.filenames.shape\n",
      "  (11314,)\n",
      "  >>> newsgroups_train.target.shape\n",
      "  (11314,)\n",
      "  >>> newsgroups_train.target[:10]\n",
      "  array([ 7,  4,  4,  1, 14, 16, 13,  3,  2,  4])\n",
      "\n",
      "It is possible to load only a sub-selection of the categories by passing the\n",
      "list of the categories to load to the\n",
      ":func:`sklearn.datasets.fetch_20newsgroups` function::\n",
      "\n",
      "  >>> cats = ['alt.atheism', 'sci.space']\n",
      "  >>> newsgroups_train = fetch_20newsgroups(subset='train', categories=cats)\n",
      "\n",
      "  >>> list(newsgroups_train.target_names)\n",
      "  ['alt.atheism', 'sci.space']\n",
      "  >>> newsgroups_train.filenames.shape\n",
      "  (1073,)\n",
      "  >>> newsgroups_train.target.shape\n",
      "  (1073,)\n",
      "  >>> newsgroups_train.target[:10]\n",
      "  array([0, 1, 1, 1, 0, 1, 1, 0, 0, 0])\n",
      "\n",
      "Converting text to vectors\n",
      "~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "\n",
      "In order to feed predictive or clustering models with the text data,\n",
      "one first need to turn the text into vectors of numerical values suitable\n",
      "for statistical analysis. This can be achieved with the utilities of the\n",
      "``sklearn.feature_extraction.text`` as demonstrated in the following\n",
      "example that extract `TF-IDF`_ vectors of unigram tokens\n",
      "from a subset of 20news::\n",
      "\n",
      "  >>> from sklearn.feature_extraction.text import TfidfVectorizer\n",
      "  >>> categories = ['alt.atheism', 'talk.religion.misc',\n",
      "  ...               'comp.graphics', 'sci.space']\n",
      "  >>> newsgroups_train = fetch_20newsgroups(subset='train',\n",
      "  ...                                       categories=categories)\n",
      "  >>> vectorizer = TfidfVectorizer()\n",
      "  >>> vectors = vectorizer.fit_transform(newsgroups_train.data)\n",
      "  >>> vectors.shape\n",
      "  (2034, 34118)\n",
      "\n",
      "The extracted TF-IDF vectors are very sparse, with an average of 159 non-zero\n",
      "components by sample in a more than 30000-dimensional space\n",
      "(less than .5% non-zero features)::\n",
      "\n",
      "  >>> vectors.nnz / float(vectors.shape[0])\n",
      "  159.01327...\n",
      "\n",
      ":func:`sklearn.datasets.fetch_20newsgroups_vectorized` is a function which \n",
      "returns ready-to-use token counts features instead of file names.\n",
      "\n",
      ".. _`20 newsgroups website`: http://people.csail.mit.edu/jrennie/20Newsgroups/\n",
      ".. _`TF-IDF`: https://en.wikipedia.org/wiki/Tf-idf\n",
      "\n",
      "\n",
      "Filtering text for more realistic training\n",
      "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "\n",
      "It is easy for a classifier to overfit on particular things that appear in the\n",
      "20 Newsgroups data, such as newsgroup headers. Many classifiers achieve very\n",
      "high F-scores, but their results would not generalize to other documents that\n",
      "aren't from this window of time.\n",
      "\n",
      "For example, let's look at the results of a multinomial Naive Bayes classifier,\n",
      "which is fast to train and achieves a decent F-score::\n",
      "\n",
      "  >>> from sklearn.naive_bayes import MultinomialNB\n",
      "  >>> from sklearn import metrics\n",
      "  >>> newsgroups_test = fetch_20newsgroups(subset='test',\n",
      "  ...                                      categories=categories)\n",
      "  >>> vectors_test = vectorizer.transform(newsgroups_test.data)\n",
      "  >>> clf = MultinomialNB(alpha=.01)\n",
      "  >>> clf.fit(vectors, newsgroups_train.target)\n",
      "  MultinomialNB(alpha=0.01, class_prior=None, fit_prior=True)\n",
      "\n",
      "  >>> pred = clf.predict(vectors_test)\n",
      "  >>> metrics.f1_score(newsgroups_test.target, pred, average='macro')\n",
      "  0.88213...\n",
      "\n",
      "(The example :ref:`sphx_glr_auto_examples_text_plot_document_classification_20newsgroups.py` shuffles\n",
      "the training and test data, instead of segmenting by time, and in that case\n",
      "multinomial Naive Bayes gets a much higher F-score of 0.88. Are you suspicious\n",
      "yet of what's going on inside this classifier?)\n",
      "\n",
      "Let's take a look at what the most informative features are:\n",
      "\n",
      "  >>> import numpy as np\n",
      "  >>> def show_top10(classifier, vectorizer, categories):\n",
      "  ...     feature_names = np.asarray(vectorizer.get_feature_names())\n",
      "  ...     for i, category in enumerate(categories):\n",
      "  ...         top10 = np.argsort(classifier.coef_[i])[-10:]\n",
      "  ...         print(\"%s: %s\" % (category, \" \".join(feature_names[top10])))\n",
      "  ...\n",
      "  >>> show_top10(clf, vectorizer, newsgroups_train.target_names)\n",
      "  alt.atheism: edu it and in you that is of to the\n",
      "  comp.graphics: edu in graphics it is for and of to the\n",
      "  sci.space: edu it that is in and space to of the\n",
      "  talk.religion.misc: not it you in is that and to of the\n",
      "\n",
      "\n",
      "You can now see many things that these features have overfit to:\n",
      "\n",
      "- Almost every group is distinguished by whether headers such as\n",
      "  ``NNTP-Posting-Host:`` and ``Distribution:`` appear more or less often.\n",
      "- Another significant feature involves whether the sender is affiliated with\n",
      "  a university, as indicated either by their headers or their signature.\n",
      "- The word \"article\" is a significant feature, based on how often people quote\n",
      "  previous posts like this: \"In article [article ID], [name] <[e-mail address]>\n",
      "  wrote:\"\n",
      "- Other features match the names and e-mail addresses of particular people who\n",
      "  were posting at the time.\n",
      "\n",
      "With such an abundance of clues that distinguish newsgroups, the classifiers\n",
      "barely have to identify topics from text at all, and they all perform at the\n",
      "same high level.\n",
      "\n",
      "For this reason, the functions that load 20 Newsgroups data provide a\n",
      "parameter called **remove**, telling it what kinds of information to strip out\n",
      "of each file. **remove** should be a tuple containing any subset of\n",
      "``('headers', 'footers', 'quotes')``, telling it to remove headers, signature\n",
      "blocks, and quotation blocks respectively.\n",
      "\n",
      "  >>> newsgroups_test = fetch_20newsgroups(subset='test',\n",
      "  ...                                      remove=('headers', 'footers', 'quotes'),\n",
      "  ...                                      categories=categories)\n",
      "  >>> vectors_test = vectorizer.transform(newsgroups_test.data)\n",
      "  >>> pred = clf.predict(vectors_test)\n",
      "  >>> metrics.f1_score(pred, newsgroups_test.target, average='macro')\n",
      "  0.77310...\n",
      "\n",
      "This classifier lost over a lot of its F-score, just because we removed\n",
      "metadata that has little to do with topic classification.\n",
      "It loses even more if we also strip this metadata from the training data:\n",
      "\n",
      "  >>> newsgroups_train = fetch_20newsgroups(subset='train',\n",
      "  ...                                       remove=('headers', 'footers', 'quotes'),\n",
      "  ...                                       categories=categories)\n",
      "  >>> vectors = vectorizer.fit_transform(newsgroups_train.data)\n",
      "  >>> clf = MultinomialNB(alpha=.01)\n",
      "  >>> clf.fit(vectors, newsgroups_train.target)\n",
      "  MultinomialNB(alpha=0.01, class_prior=None, fit_prior=True)\n",
      "\n",
      "  >>> vectors_test = vectorizer.transform(newsgroups_test.data)\n",
      "  >>> pred = clf.predict(vectors_test)\n",
      "  >>> metrics.f1_score(newsgroups_test.target, pred, average='macro')\n",
      "  0.76995...\n",
      "\n",
      "Some other classifiers cope better with this harder version of the task. Try\n",
      "running :ref:`sphx_glr_auto_examples_model_selection_grid_search_text_feature_extraction.py` with and without\n",
      "the ``--filter`` option to compare the results.\n",
      "\n",
      ".. topic:: Recommendation\n",
      "\n",
      "  When evaluating text classifiers on the 20 Newsgroups data, you\n",
      "  should strip newsgroup-related metadata. In scikit-learn, you can do this by\n",
      "  setting ``remove=('headers', 'footers', 'quotes')``. The F-score will be\n",
      "  lower because it is more realistic.\n",
      "\n",
      ".. topic:: Examples\n",
      "\n",
      "   * :ref:`sphx_glr_auto_examples_model_selection_grid_search_text_feature_extraction.py`\n",
      "\n",
      "   * :ref:`sphx_glr_auto_examples_text_plot_document_classification_20newsgroups.py`\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Display a description of the dataset\n",
    "print(newsgroups.DESCR)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[17  7 10 ... 14 12 11]\n"
     ]
    }
   ],
   "source": [
    "# print the target variables \n",
    "print(newsgroups.target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Class labels: [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "\n",
    "print('Class labels:', np.unique(newsgroups.target))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "train_set, test_set, train_labels, test_labels = train_test_split(\n",
    "                              newsgroups.data,               # features\n",
    "                              newsgroups.target,             # labels\n",
    "                              test_size = 0.30,          # split ratio\n",
    "                              random_state = 1,          # set random seed\n",
    "                              stratify = newsgroups.target)  # randomize based on labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Labels count in y: [480 584 591 590 578 593 585 594 598 597 600 595 591 594 593 599 546 564\n",
      " 465 377]\n",
      "Labels count in y_train: [336 409 414 413 405 415 409 416 418 418 420 416 414 416 415 419 382 395\n",
      " 325 264]\n",
      "Labels count in y_test: [144 175 177 177 173 178 176 178 180 179 180 179 177 178 178 180 164 169\n",
      " 140 113]\n"
     ]
    }
   ],
   "source": [
    "print('Labels count in y:', np.bincount(newsgroups.target))\n",
    "print('Labels count in y_train:', np.bincount(train_labels))\n",
    "print('Labels count in y_test:', np.bincount(test_labels))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# No normalization (use raw features)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "lr = LogisticRegression(C = 100.0, random_state=1, solver='liblinear', multi_class='ovr', max_iter = 3000)\n",
    "lr.fit(train_set, train_labels)\n",
    "y_pred = lr.predict(test_set)\n",
    "preds = y_pred"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.8833578792341679\n"
     ]
    }
   ],
   "source": [
    "#𝑀1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_logre_nonorm = accuracy_score(test_labels, preds)\n",
    "print('Accuracy : ' ,acc_logre_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-Score :  0.8834332735828504\n"
     ]
    }
   ],
   "source": [
    "#𝑀2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_logre_nonorm = f1_score(test_labels, preds, average='weighted')\n",
    "print('F1-Score : ',f1_logre_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  5.942857142857143\n"
     ]
    }
   ],
   "source": [
    "#𝑀3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_logre_nonorm = mean_squared_error(test_labels, preds)\n",
    "print('Mean Squared Error : ', mse_logre_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.11664212076583211\n"
     ]
    }
   ],
   "source": [
    "#𝑀4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "y_true = test_labels\n",
    "y_pred = preds\n",
    "hamloss_logre_nonorm = hamming_loss(test_labels, preds)\n",
    "print('Hamming Loss : ' ,hamloss_logre_nonorm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Perceptron"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Perceptron(eta0=0.1, random_state=1)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import Perceptron\n",
    "ppn = Perceptron(eta0=0.1, random_state=1)\n",
    "ppn.fit(train_set, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 553\n"
     ]
    }
   ],
   "source": [
    "y_pred = ppn.predict(test_set)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.8371134020618557\n"
     ]
    }
   ],
   "source": [
    "#𝑀1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_perc_nonorm = accuracy_score(test_labels, y_pred)\n",
    "print('Accuracy : ' , acc_perc_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-Score :  0.8369830236767066\n"
     ]
    }
   ],
   "source": [
    "#𝑀2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_perc_nonorm = f1_score(test_labels, y_pred, average='weighted')\n",
    "print('F1-Score : ', f1_perc_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared error :  8.106038291605302\n"
     ]
    }
   ],
   "source": [
    "#𝑀3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_perc_nonorm = mean_squared_error(test_labels, y_pred)\n",
    "print('Mean Squared error : ', mse_perc_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.16288659793814433\n"
     ]
    }
   ],
   "source": [
    "#𝑀4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_perc_nonorm = hamming_loss(test_labels, y_pred)\n",
    "print('Hamming Loss : ', hamloss_perc_nonorm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  Support Vector Machines"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### With Linear Kernel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(kernel='linear', random_state=1)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "svm = SVC(kernel='linear', C=1.0, random_state=1)\n",
    "svm.fit(train_set, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 646\n"
     ]
    }
   ],
   "source": [
    "y_pred = svm.predict(test_set)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.809720176730486\n"
     ]
    }
   ],
   "source": [
    "#𝑀1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_svm_lk_nonorm = accuracy_score(test_labels, y_pred)\n",
    "print('Accuracy : ' ,acc_svm_lk_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-Score :  0.8108419298397528\n"
     ]
    }
   ],
   "source": [
    "#𝑀2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_svm_lk_nonorm = f1_score(test_labels, y_pred, average='weighted')\n",
    "print('F1-Score : ', f1_svm_lk_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  10.202356406480117\n"
     ]
    }
   ],
   "source": [
    "#𝑀3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_svm_lk_nonorm = mean_squared_error(test_labels, y_pred)\n",
    "print('Mean Squared Error : ', mse_svm_lk_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.19027982326951398\n"
     ]
    }
   ],
   "source": [
    "#𝑀4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_svm_lk_nonorm = hamming_loss(test_labels, y_pred)\n",
    "print('Hamming Loss : ',hamloss_svm_lk_nonorm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### With RBF Kernel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(random_state=1)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "svm = SVC(kernel='rbf', C=1.0, random_state=1)\n",
    "svm.fit(train_set, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 2683\n"
     ]
    }
   ],
   "source": [
    "y_pred = svm.predict(test_set)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.209720176730486\n"
     ]
    }
   ],
   "source": [
    "#𝑀1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_svm_rbf_nonorm = accuracy_score(test_labels, y_pred)\n",
    "print('Accuracy : ', acc_svm_rbf_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-score : 0.22002482095243792\n"
     ]
    }
   ],
   "source": [
    "#𝑀2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_svm_rbf_nonorm = f1_score(test_labels, y_pred, average='weighted')\n",
    "print('F1-score :',f1_svm_rbf_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  44.57938144329897\n"
     ]
    }
   ],
   "source": [
    "#𝑀3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_svm_rbf_nonorm = mean_squared_error(test_labels, y_pred)\n",
    "print('Mean Squared Error : ',mse_svm_rbf_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.790279823269514\n"
     ]
    }
   ],
   "source": [
    "#𝑀4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_svm_rbf_nonorm = hamming_loss(test_labels, y_pred)\n",
    "print('Hamming Loss : ',hamloss_svm_rbf_nonorm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(max_depth=4, random_state=1)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "\n",
    "# Build a decision tree for classification tasks\n",
    "# citerion:  The function to measure the quality of a split. \n",
    "# max_depth: The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or\n",
    "#            until all leaves contain less than min_samples_split samples.\n",
    "# min_samples_split: The minimum number of samples required to split an internal node.\n",
    "# min_samples_leaf:  The minimum number of samples required to to be at a leaf node.\n",
    "tree_model = DecisionTreeClassifier(criterion = 'gini', max_depth = 4, random_state = 1)\n",
    "tree_model.fit(train_set, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 2792\n"
     ]
    }
   ],
   "source": [
    "y_pred = tree_model.predict(test_set)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.17761413843888071\n"
     ]
    }
   ],
   "source": [
    "#𝑀1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_dtree_nonorm = accuracy_score(test_labels, y_pred)\n",
    "print('Accuracy : ', acc_dtree_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-score : 0.14492706249903325\n"
     ]
    }
   ],
   "source": [
    "#𝑀2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_dtree_nonorm = f1_score(test_labels, y_pred, average='weighted')\n",
    "print('F1-score :',f1_dtree_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  28.07717231222386\n"
     ]
    }
   ],
   "source": [
    "#𝑀3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_dtree_nonorm = mean_squared_error(test_labels, y_pred)\n",
    "print('Mean Squared Error : ',mse_dtree_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.8223858615611193\n"
     ]
    }
   ],
   "source": [
    "#𝑀4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_dtree_nonorm = hamming_loss(test_labels, y_pred)\n",
    "print('Hamming Loss : ',hamloss_dtree_nonorm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Random Forests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(n_estimators=25, n_jobs=-1, random_state=1)"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "# Create a Random Forest comprised of 25 decision trees\n",
    "# citerion:  The function to measure the quality of a split. \n",
    "# max_depth: The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or\n",
    "#            until all leaves contain less than min_samples_split samples.\n",
    "# min_samples_split: The minimum number of samples required to split an internal node.\n",
    "# min_samples_leaf:  The minimum number of samples required to to be at a leaf node.\n",
    "forest = RandomForestClassifier(criterion='gini', n_estimators=25, random_state=1, n_jobs=-1)\n",
    "forest.fit(train_set, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 763\n"
     ]
    }
   ],
   "source": [
    "y_pred = forest.predict(test_set)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.7752577319587629\n"
     ]
    }
   ],
   "source": [
    "#𝑀1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_rforest_nonorm = accuracy_score(test_labels, y_pred)\n",
    "print('Accuracy : ', acc_rforest_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-score : 0.7726713277660205\n"
     ]
    }
   ],
   "source": [
    "#𝑀2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_rforest_nonorm = f1_score(test_labels, y_pred, average='weighted')\n",
    "print('F1-score :',f1_rforest_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  13.158762886597938\n"
     ]
    }
   ],
   "source": [
    "#𝑀3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_rforest_nonorm = mean_squared_error(test_labels, y_pred)\n",
    "print('Mean Squared Error : ',mse_rforest_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.22474226804123712\n"
     ]
    }
   ],
   "source": [
    "#𝑀4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_rforest_nonorm = hamming_loss(test_labels, y_pred)\n",
    "print('Hamming Loss : ',hamloss_rforest_nonorm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Feed-forward Neural Network with two hidden layers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MLPClassifier(alpha=0.3, hidden_layer_sizes=(10, 11), max_iter=1000)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.neural_network import MLPClassifier\n",
    "mlp = MLPClassifier(activation='relu', hidden_layer_sizes=(10,11), alpha = 0.3, max_iter = 1000)\n",
    "\n",
    "mlp.fit(train_set, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 592\n"
     ]
    }
   ],
   "source": [
    "y_pred = mlp.predict(test_set)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.8256259204712812\n"
     ]
    }
   ],
   "source": [
    "#𝑀1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_nnet_nonorm = accuracy_score(test_labels, y_pred)\n",
    "print('Accuracy : ', acc_nnet_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-score : 0.8263213385405318\n"
     ]
    }
   ],
   "source": [
    "#𝑀2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_nnet_nonorm = f1_score(test_labels, y_pred, average='weighted')\n",
    "print('F1-score :',f1_nnet_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  8.784683357879235\n"
     ]
    }
   ],
   "source": [
    "#𝑀3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_nnet_nonorm = mean_squared_error(test_labels, y_pred)\n",
    "print('Mean Squared Error : ',mse_nnet_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.1743740795287187\n"
     ]
    }
   ],
   "source": [
    "#𝑀4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_nnet_nonorm = hamming_loss(test_labels, y_pred)\n",
    "print('Hamming Loss : ',hamloss_nnet_nonorm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Feature Standardization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Using the The 20 newsgroups text (Vectorized) Data Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the dataset\n",
    "from sklearn.datasets import fetch_20newsgroups_vectorized\n",
    "newsgroups = fetch_20newsgroups_vectorized(normalize = True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ".. _20newsgroups_dataset:\n",
      "\n",
      "The 20 newsgroups text dataset\n",
      "------------------------------\n",
      "\n",
      "The 20 newsgroups dataset comprises around 18000 newsgroups posts on\n",
      "20 topics split in two subsets: one for training (or development)\n",
      "and the other one for testing (or for performance evaluation). The split\n",
      "between the train and test set is based upon a messages posted before\n",
      "and after a specific date.\n",
      "\n",
      "This module contains two loaders. The first one,\n",
      ":func:`sklearn.datasets.fetch_20newsgroups`,\n",
      "returns a list of the raw texts that can be fed to text feature\n",
      "extractors such as :class:`sklearn.feature_extraction.text.CountVectorizer`\n",
      "with custom parameters so as to extract feature vectors.\n",
      "The second one, :func:`sklearn.datasets.fetch_20newsgroups_vectorized`,\n",
      "returns ready-to-use features, i.e., it is not necessary to use a feature\n",
      "extractor.\n",
      "\n",
      "**Data Set Characteristics:**\n",
      "\n",
      "    =================   ==========\n",
      "    Classes                     20\n",
      "    Samples total            18846\n",
      "    Dimensionality               1\n",
      "    Features                  text\n",
      "    =================   ==========\n",
      "\n",
      "Usage\n",
      "~~~~~\n",
      "\n",
      "The :func:`sklearn.datasets.fetch_20newsgroups` function is a data\n",
      "fetching / caching functions that downloads the data archive from\n",
      "the original `20 newsgroups website`_, extracts the archive contents\n",
      "in the ``~/scikit_learn_data/20news_home`` folder and calls the\n",
      ":func:`sklearn.datasets.load_files` on either the training or\n",
      "testing set folder, or both of them::\n",
      "\n",
      "  >>> from sklearn.datasets import fetch_20newsgroups\n",
      "  >>> newsgroups_train = fetch_20newsgroups(subset='train')\n",
      "\n",
      "  >>> from pprint import pprint\n",
      "  >>> pprint(list(newsgroups_train.target_names))\n",
      "  ['alt.atheism',\n",
      "   'comp.graphics',\n",
      "   'comp.os.ms-windows.misc',\n",
      "   'comp.sys.ibm.pc.hardware',\n",
      "   'comp.sys.mac.hardware',\n",
      "   'comp.windows.x',\n",
      "   'misc.forsale',\n",
      "   'rec.autos',\n",
      "   'rec.motorcycles',\n",
      "   'rec.sport.baseball',\n",
      "   'rec.sport.hockey',\n",
      "   'sci.crypt',\n",
      "   'sci.electronics',\n",
      "   'sci.med',\n",
      "   'sci.space',\n",
      "   'soc.religion.christian',\n",
      "   'talk.politics.guns',\n",
      "   'talk.politics.mideast',\n",
      "   'talk.politics.misc',\n",
      "   'talk.religion.misc']\n",
      "\n",
      "The real data lies in the ``filenames`` and ``target`` attributes. The target\n",
      "attribute is the integer index of the category::\n",
      "\n",
      "  >>> newsgroups_train.filenames.shape\n",
      "  (11314,)\n",
      "  >>> newsgroups_train.target.shape\n",
      "  (11314,)\n",
      "  >>> newsgroups_train.target[:10]\n",
      "  array([ 7,  4,  4,  1, 14, 16, 13,  3,  2,  4])\n",
      "\n",
      "It is possible to load only a sub-selection of the categories by passing the\n",
      "list of the categories to load to the\n",
      ":func:`sklearn.datasets.fetch_20newsgroups` function::\n",
      "\n",
      "  >>> cats = ['alt.atheism', 'sci.space']\n",
      "  >>> newsgroups_train = fetch_20newsgroups(subset='train', categories=cats)\n",
      "\n",
      "  >>> list(newsgroups_train.target_names)\n",
      "  ['alt.atheism', 'sci.space']\n",
      "  >>> newsgroups_train.filenames.shape\n",
      "  (1073,)\n",
      "  >>> newsgroups_train.target.shape\n",
      "  (1073,)\n",
      "  >>> newsgroups_train.target[:10]\n",
      "  array([0, 1, 1, 1, 0, 1, 1, 0, 0, 0])\n",
      "\n",
      "Converting text to vectors\n",
      "~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "\n",
      "In order to feed predictive or clustering models with the text data,\n",
      "one first need to turn the text into vectors of numerical values suitable\n",
      "for statistical analysis. This can be achieved with the utilities of the\n",
      "``sklearn.feature_extraction.text`` as demonstrated in the following\n",
      "example that extract `TF-IDF`_ vectors of unigram tokens\n",
      "from a subset of 20news::\n",
      "\n",
      "  >>> from sklearn.feature_extraction.text import TfidfVectorizer\n",
      "  >>> categories = ['alt.atheism', 'talk.religion.misc',\n",
      "  ...               'comp.graphics', 'sci.space']\n",
      "  >>> newsgroups_train = fetch_20newsgroups(subset='train',\n",
      "  ...                                       categories=categories)\n",
      "  >>> vectorizer = TfidfVectorizer()\n",
      "  >>> vectors = vectorizer.fit_transform(newsgroups_train.data)\n",
      "  >>> vectors.shape\n",
      "  (2034, 34118)\n",
      "\n",
      "The extracted TF-IDF vectors are very sparse, with an average of 159 non-zero\n",
      "components by sample in a more than 30000-dimensional space\n",
      "(less than .5% non-zero features)::\n",
      "\n",
      "  >>> vectors.nnz / float(vectors.shape[0])\n",
      "  159.01327...\n",
      "\n",
      ":func:`sklearn.datasets.fetch_20newsgroups_vectorized` is a function which \n",
      "returns ready-to-use token counts features instead of file names.\n",
      "\n",
      ".. _`20 newsgroups website`: http://people.csail.mit.edu/jrennie/20Newsgroups/\n",
      ".. _`TF-IDF`: https://en.wikipedia.org/wiki/Tf-idf\n",
      "\n",
      "\n",
      "Filtering text for more realistic training\n",
      "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "\n",
      "It is easy for a classifier to overfit on particular things that appear in the\n",
      "20 Newsgroups data, such as newsgroup headers. Many classifiers achieve very\n",
      "high F-scores, but their results would not generalize to other documents that\n",
      "aren't from this window of time.\n",
      "\n",
      "For example, let's look at the results of a multinomial Naive Bayes classifier,\n",
      "which is fast to train and achieves a decent F-score::\n",
      "\n",
      "  >>> from sklearn.naive_bayes import MultinomialNB\n",
      "  >>> from sklearn import metrics\n",
      "  >>> newsgroups_test = fetch_20newsgroups(subset='test',\n",
      "  ...                                      categories=categories)\n",
      "  >>> vectors_test = vectorizer.transform(newsgroups_test.data)\n",
      "  >>> clf = MultinomialNB(alpha=.01)\n",
      "  >>> clf.fit(vectors, newsgroups_train.target)\n",
      "  MultinomialNB(alpha=0.01, class_prior=None, fit_prior=True)\n",
      "\n",
      "  >>> pred = clf.predict(vectors_test)\n",
      "  >>> metrics.f1_score(newsgroups_test.target, pred, average='macro')\n",
      "  0.88213...\n",
      "\n",
      "(The example :ref:`sphx_glr_auto_examples_text_plot_document_classification_20newsgroups.py` shuffles\n",
      "the training and test data, instead of segmenting by time, and in that case\n",
      "multinomial Naive Bayes gets a much higher F-score of 0.88. Are you suspicious\n",
      "yet of what's going on inside this classifier?)\n",
      "\n",
      "Let's take a look at what the most informative features are:\n",
      "\n",
      "  >>> import numpy as np\n",
      "  >>> def show_top10(classifier, vectorizer, categories):\n",
      "  ...     feature_names = np.asarray(vectorizer.get_feature_names())\n",
      "  ...     for i, category in enumerate(categories):\n",
      "  ...         top10 = np.argsort(classifier.coef_[i])[-10:]\n",
      "  ...         print(\"%s: %s\" % (category, \" \".join(feature_names[top10])))\n",
      "  ...\n",
      "  >>> show_top10(clf, vectorizer, newsgroups_train.target_names)\n",
      "  alt.atheism: edu it and in you that is of to the\n",
      "  comp.graphics: edu in graphics it is for and of to the\n",
      "  sci.space: edu it that is in and space to of the\n",
      "  talk.religion.misc: not it you in is that and to of the\n",
      "\n",
      "\n",
      "You can now see many things that these features have overfit to:\n",
      "\n",
      "- Almost every group is distinguished by whether headers such as\n",
      "  ``NNTP-Posting-Host:`` and ``Distribution:`` appear more or less often.\n",
      "- Another significant feature involves whether the sender is affiliated with\n",
      "  a university, as indicated either by their headers or their signature.\n",
      "- The word \"article\" is a significant feature, based on how often people quote\n",
      "  previous posts like this: \"In article [article ID], [name] <[e-mail address]>\n",
      "  wrote:\"\n",
      "- Other features match the names and e-mail addresses of particular people who\n",
      "  were posting at the time.\n",
      "\n",
      "With such an abundance of clues that distinguish newsgroups, the classifiers\n",
      "barely have to identify topics from text at all, and they all perform at the\n",
      "same high level.\n",
      "\n",
      "For this reason, the functions that load 20 Newsgroups data provide a\n",
      "parameter called **remove**, telling it what kinds of information to strip out\n",
      "of each file. **remove** should be a tuple containing any subset of\n",
      "``('headers', 'footers', 'quotes')``, telling it to remove headers, signature\n",
      "blocks, and quotation blocks respectively.\n",
      "\n",
      "  >>> newsgroups_test = fetch_20newsgroups(subset='test',\n",
      "  ...                                      remove=('headers', 'footers', 'quotes'),\n",
      "  ...                                      categories=categories)\n",
      "  >>> vectors_test = vectorizer.transform(newsgroups_test.data)\n",
      "  >>> pred = clf.predict(vectors_test)\n",
      "  >>> metrics.f1_score(pred, newsgroups_test.target, average='macro')\n",
      "  0.77310...\n",
      "\n",
      "This classifier lost over a lot of its F-score, just because we removed\n",
      "metadata that has little to do with topic classification.\n",
      "It loses even more if we also strip this metadata from the training data:\n",
      "\n",
      "  >>> newsgroups_train = fetch_20newsgroups(subset='train',\n",
      "  ...                                       remove=('headers', 'footers', 'quotes'),\n",
      "  ...                                       categories=categories)\n",
      "  >>> vectors = vectorizer.fit_transform(newsgroups_train.data)\n",
      "  >>> clf = MultinomialNB(alpha=.01)\n",
      "  >>> clf.fit(vectors, newsgroups_train.target)\n",
      "  MultinomialNB(alpha=0.01, class_prior=None, fit_prior=True)\n",
      "\n",
      "  >>> vectors_test = vectorizer.transform(newsgroups_test.data)\n",
      "  >>> pred = clf.predict(vectors_test)\n",
      "  >>> metrics.f1_score(newsgroups_test.target, pred, average='macro')\n",
      "  0.76995...\n",
      "\n",
      "Some other classifiers cope better with this harder version of the task. Try\n",
      "running :ref:`sphx_glr_auto_examples_model_selection_grid_search_text_feature_extraction.py` with and without\n",
      "the ``--filter`` option to compare the results.\n",
      "\n",
      ".. topic:: Recommendation\n",
      "\n",
      "  When evaluating text classifiers on the 20 Newsgroups data, you\n",
      "  should strip newsgroup-related metadata. In scikit-learn, you can do this by\n",
      "  setting ``remove=('headers', 'footers', 'quotes')``. The F-score will be\n",
      "  lower because it is more realistic.\n",
      "\n",
      ".. topic:: Examples\n",
      "\n",
      "   * :ref:`sphx_glr_auto_examples_model_selection_grid_search_text_feature_extraction.py`\n",
      "\n",
      "   * :ref:`sphx_glr_auto_examples_text_plot_document_classification_20newsgroups.py`\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Display a description of the dataset\n",
    "print(newsgroups.DESCR)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[17  7 10 ... 14 12 11]\n"
     ]
    }
   ],
   "source": [
    "# print the target variables \n",
    "print(newsgroups.target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Class labels: [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "\n",
    "print('Class labels:', np.unique(newsgroups.target))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "train_set_std, test_set_std, train_labels_std, test_labels_std = train_test_split(\n",
    "                              newsgroups.data,               # features\n",
    "                              newsgroups.target,             # labels\n",
    "                              test_size = 0.30,          # split ratio\n",
    "                              random_state = 1,          # set random seed\n",
    "                              stratify = newsgroups.target)  # randomize based on labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Labels count in y: [480 584 591 590 578 593 585 594 598 597 600 595 591 594 593 599 546 564\n",
      " 465 377]\n",
      "Labels count in y_train: [336 409 414 413 405 415 409 416 418 418 420 416 414 416 415 419 382 395\n",
      " 325 264]\n",
      "Labels count in y_test: [144 175 177 177 173 178 176 178 180 179 180 179 177 178 178 180 164 169\n",
      " 140 113]\n"
     ]
    }
   ],
   "source": [
    "print('Labels count in y:', np.bincount(newsgroups.target))\n",
    "print('Labels count in y_train:', np.bincount(train_labels))\n",
    "print('Labels count in y_test:', np.bincount(test_labels))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "lr = LogisticRegression(C = 100.0, random_state=1, solver='liblinear', multi_class='ovr', max_iter = 3000)\n",
    "lr.fit(train_set_std, train_labels_std)\n",
    "y_pred = lr.predict(test_set_std)\n",
    "preds = y_pred"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.8839469808541973\n"
     ]
    }
   ],
   "source": [
    "#𝑀1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_logre_norm = accuracy_score(test_labels_std, preds)\n",
    "print('Accuracy : ' ,acc_logre_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-Score :  0.8834743172953291\n"
     ]
    }
   ],
   "source": [
    "#𝑀2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_logre_norm = f1_score(test_labels_std, preds, average='weighted')\n",
    "print('F1-Score : ',f1_logre_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  5.611192930780559\n"
     ]
    }
   ],
   "source": [
    "#𝑀3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_logre_norm = mean_squared_error(test_labels_std, preds)\n",
    "print('Mean Squared Error : ', mse_logre_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.11605301914580265\n"
     ]
    }
   ],
   "source": [
    "#𝑀4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "y_true = test_labels\n",
    "y_pred = preds\n",
    "hamloss_logre_norm = hamming_loss(test_labels_std, preds)\n",
    "print('Hamming Loss : ' ,hamloss_logre_norm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Perceptron"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Perceptron(eta0=0.1, random_state=1)"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import Perceptron\n",
    "ppn = Perceptron(eta0=0.1, random_state=1)\n",
    "ppn.fit(train_set_std, train_labels_std)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 542\n"
     ]
    }
   ],
   "source": [
    "y_pred = ppn.predict(test_set_std)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels_std != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.8403534609720177\n"
     ]
    }
   ],
   "source": [
    "#𝑀1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_perc_norm = accuracy_score(test_labels_std, y_pred)\n",
    "print('Accuracy : ' , acc_perc_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-Score :  0.8421057472688426\n"
     ]
    }
   ],
   "source": [
    "#𝑀2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_perc_norm = f1_score(test_labels_std, y_pred, average='weighted')\n",
    "print('F1-Score : ', f1_perc_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared error :  7.272754050073638\n"
     ]
    }
   ],
   "source": [
    "#𝑀3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_perc_norm = mean_squared_error(test_labels_std, y_pred)\n",
    "print('Mean Squared error : ', mse_perc_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.15964653902798231\n"
     ]
    }
   ],
   "source": [
    "#𝑀4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_perc_norm = hamming_loss(test_labels_std, y_pred)\n",
    "print('Hamming Loss : ', hamloss_perc_norm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  Support Vector Machines"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### With Linear Kernel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(kernel='linear', random_state=1)"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "svm = SVC(kernel='linear', C=1.0, random_state=1)\n",
    "svm.fit(train_set_std, train_labels_std)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 594\n"
     ]
    }
   ],
   "source": [
    "y_pred = svm.predict(test_set_std)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels_std != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.8250368188512518\n"
     ]
    }
   ],
   "source": [
    "#𝑀1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_svm_lk_norm = accuracy_score(test_labels_std, y_pred)\n",
    "print('Accuracy : ' ,acc_svm_lk_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-Score :  0.8243244743274319\n"
     ]
    }
   ],
   "source": [
    "#𝑀2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_svm_lk_norm = f1_score(test_labels_std, y_pred, average='weighted')\n",
    "print('F1-Score : ', f1_svm_lk_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  10.0\n"
     ]
    }
   ],
   "source": [
    "#𝑀3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_svm_lk_norm = mean_squared_error(test_labels_std, y_pred)\n",
    "print('Mean Squared Error : ', mse_svm_lk_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.17496318114874815\n"
     ]
    }
   ],
   "source": [
    "#𝑀4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_svm_lk_norm = hamming_loss(test_labels_std, y_pred)\n",
    "print('Hamming Loss : ',hamloss_svm_lk_norm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### With RBF Kernel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(random_state=1)"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "svm = SVC(kernel='rbf', C=1.0, random_state=1)\n",
    "svm.fit(train_set, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 3219\n"
     ]
    }
   ],
   "source": [
    "y_pred = svm.predict(test_set_std)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels_std != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.05184094256259205\n"
     ]
    }
   ],
   "source": [
    "#𝑀1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_svm_rbf_norm = accuracy_score(test_labels_std, y_pred)\n",
    "print('Accuracy : ', acc_svm_rbf_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-score : 0.005110056505749763\n"
     ]
    }
   ],
   "source": [
    "#𝑀2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_svm_rbf_norm = f1_score(test_labels_std, y_pred, average='weighted')\n",
    "print('F1-score :',f1_svm_rbf_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  41.79381443298969\n"
     ]
    }
   ],
   "source": [
    "#𝑀3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_svm_rbf_norm = mean_squared_error(test_labels_std, y_pred)\n",
    "print('Mean Squared Error : ',mse_svm_rbf_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.9481590574374079\n"
     ]
    }
   ],
   "source": [
    "#𝑀4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_svm_rbf_norm = hamming_loss(test_labels_std, y_pred)\n",
    "print('Hamming Loss : ',hamloss_svm_rbf_norm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(max_depth=4, random_state=1)"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Decision Treefrom sklearn.tree import DecisionTreeClassifier\n",
    "\n",
    "# Build a decision tree for classification tasks\n",
    "# citerion:  The function to measure the quality of a split. \n",
    "# max_depth: The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or\n",
    "#            until all leaves contain less than min_samples_split samples.\n",
    "# min_samples_split: The minimum number of samples required to split an internal node.\n",
    "# min_samples_leaf:  The minimum number of samples required to to be at a leaf node.\n",
    "tree_model = DecisionTreeClassifier(criterion = 'gini', max_depth = 4, random_state = 1)\n",
    "tree_model.fit(train_set_std, train_labels_std)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 2795\n"
     ]
    }
   ],
   "source": [
    "y_pred = tree_model.predict(test_set_std)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels_std != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.17673048600883653\n"
     ]
    }
   ],
   "source": [
    "#𝑀1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_dtree_norm = accuracy_score(test_labels_std, y_pred)\n",
    "print('Accuracy : ', acc_dtree_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-score : 0.14889986880610634\n"
     ]
    }
   ],
   "source": [
    "#𝑀2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_dtree_norm = f1_score(test_labels_std, y_pred, average='weighted')\n",
    "print('F1-score :',f1_dtree_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  27.844477172312224\n"
     ]
    }
   ],
   "source": [
    "#𝑀3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_dtree_norm = mean_squared_error(test_labels_std, y_pred)\n",
    "print('Mean Squared Error : ',mse_dtree_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.8232695139911634\n"
     ]
    }
   ],
   "source": [
    "#𝑀4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_dtree_norm = hamming_loss(test_labels_std, y_pred)\n",
    "print('Hamming Loss : ',hamloss_dtree_norm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Random Forests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(n_estimators=25, n_jobs=-1, random_state=1)"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "# Create a Random Forest comprised of 25 decision trees\n",
    "# citerion:  The function to measure the quality of a split. \n",
    "# max_depth: The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or\n",
    "#            until all leaves contain less than min_samples_split samples.\n",
    "# min_samples_split: The minimum number of samples required to split an internal node.\n",
    "# min_samples_leaf:  The minimum number of samples required to to be at a leaf node.\n",
    "forest = RandomForestClassifier(criterion='gini', n_estimators=25, random_state=1, n_jobs=-1)\n",
    "forest.fit(train_set_std, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 880\n"
     ]
    }
   ],
   "source": [
    "y_pred = y_pred = forest.predict(test_set_std)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels_std != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.7407952871870398\n"
     ]
    }
   ],
   "source": [
    "#𝑀1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_rforest_norm = accuracy_score(test_labels_std, y_pred)\n",
    "print('Accuracy : ', acc_rforest_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-score : 0.7363864570230161\n"
     ]
    }
   ],
   "source": [
    "#𝑀2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_rforest_norm = f1_score(test_labels_std, y_pred, average='weighted')\n",
    "print('F1-score :',f1_rforest_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  14.703387334315169\n"
     ]
    }
   ],
   "source": [
    "#𝑀3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_rforest_norm = mean_squared_error(test_labels_std, y_pred)\n",
    "print('Mean Squared Error : ',mse_rforest_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.25920471281296026\n"
     ]
    }
   ],
   "source": [
    "#𝑀4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_rforest_norm = hamming_loss(test_labels_std, y_pred)\n",
    "print('Hamming Loss : ',hamloss_rforest_norm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Feed-forward Neural Network with two hidden layers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MLPClassifier(alpha=0.3, hidden_layer_sizes=(10, 11), max_iter=1000)"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.neural_network import MLPClassifier\n",
    "mlp = MLPClassifier(activation='relu', hidden_layer_sizes=(10,11), alpha = 0.3, max_iter = 1000)\n",
    "\n",
    "mlp.fit(train_set_std, train_labels_std)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 663\n"
     ]
    }
   ],
   "source": [
    "y_pred = mlp.predict(test_set_std)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.8047128129602357\n"
     ]
    }
   ],
   "source": [
    "#𝑀1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_nnet_norm = accuracy_score(test_labels_std, y_pred)\n",
    "print('Accuracy : ', acc_nnet_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-score : 0.8068021639045494\n"
     ]
    }
   ],
   "source": [
    "#𝑀2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_nnet_norm = f1_score(test_labels_std, y_pred, average='weighted')\n",
    "print('F1-score :',f1_nnet_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  10.063917525773196\n"
     ]
    }
   ],
   "source": [
    "#𝑀3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_nnet_norm = mean_squared_error(test_labels_std, y_pred)\n",
    "print('Mean Squared Error : ',mse_nnet_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.19528718703976436\n"
     ]
    }
   ],
   "source": [
    "#𝑀4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_nnet_norm = hamming_loss(test_labels_std, y_pred)\n",
    "print('Hamming Loss : ',hamloss_nnet_norm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plots"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## No Normalazation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### IRIS Classification Accuracy Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "classifications = [acc_logre_nonorm, acc_perc_nonorm, acc_svm_lk_nonorm, acc_svm_rbf_nonorm, acc_dtree_nonorm, acc_rforest_nonorm, acc_nnet_nonorm]\n",
    "scores = ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network')\n",
    "y_pos = np.arange(len(scores))\n",
    "plt.barh(y_pos, classifications)\n",
    "plt.yticks(y_pos, scores)\n",
    "plt.xlabel('Scores')\n",
    "plt.ylabel('Classifiers')\n",
    "plt.title('20 newsgroups (vectorized) Classification Accuracy Metrics')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "classifications = [f1_logre_nonorm, f1_perc_nonorm, f1_svm_lk_nonorm, f1_svm_rbf_nonorm, f1_dtree_nonorm, f1_rforest_nonorm, f1_nnet_nonorm]\n",
    "scores = ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network')\n",
    "y_pos = np.arange(len(scores))\n",
    "plt.barh(y_pos, classifications)\n",
    "plt.yticks(y_pos, scores)\n",
    "plt.xlabel('Scores')\n",
    "plt.ylabel('Classifiers')\n",
    "plt.title('20 newsgroups (vectorized) F1-Score Metrics')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "classifications = [mse_logre_nonorm, mse_perc_nonorm, mse_svm_lk_nonorm, mse_svm_rbf_nonorm, mse_dtree_nonorm, mse_rforest_nonorm, mse_nnet_nonorm]\n",
    "scores = ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network')\n",
    "y_pos = np.arange(len(scores))\n",
    "plt.barh(y_pos, classifications)\n",
    "plt.yticks(y_pos, scores)\n",
    "plt.xlabel('Scores')\n",
    "plt.ylabel('Classifiers')\n",
    "plt.title('20 newsgroups (vectorized) Mean Squared Error Metrics')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "classifications = [hamloss_logre_nonorm, hamloss_perc_nonorm, hamloss_svm_lk_nonorm, hamloss_svm_rbf_nonorm, hamloss_dtree_nonorm, hamloss_rforest_nonorm, hamloss_nnet_nonorm]\n",
    "scores = ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network')\n",
    "y_pos = np.arange(len(scores))\n",
    "plt.barh(y_pos, classifications)\n",
    "plt.yticks(y_pos, scores)\n",
    "plt.xlabel('Scores')\n",
    "plt.ylabel('Classifiers')\n",
    "plt.title('20 newsgroups (vectorized) Hamming Loss Metrics')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Feature Standardization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### IRIS Classification Accuracy Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "classifications = [acc_logre_norm, acc_perc_norm, acc_svm_lk_norm, acc_svm_rbf_norm, acc_dtree_norm, acc_rforest_norm, acc_nnet_norm]\n",
    "scores = ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network')\n",
    "y_pos = np.arange(len(scores))\n",
    "plt.barh(y_pos, classifications)\n",
    "plt.yticks(y_pos, scores)\n",
    "plt.xlabel('Scores')\n",
    "plt.ylabel('Classifiers')\n",
    "plt.title('20 newsgroups (vectorized) Classification Accuracy Metrics')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "classifications = [f1_logre_norm, f1_perc_norm, f1_svm_lk_norm, f1_svm_rbf_norm, f1_dtree_norm, f1_rforest_norm, f1_nnet_norm]\n",
    "scores = ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network')\n",
    "y_pos = np.arange(len(scores))\n",
    "plt.barh(y_pos, classifications)\n",
    "plt.yticks(y_pos, scores)\n",
    "plt.xlabel('Scores')\n",
    "plt.ylabel('Classifiers')\n",
    "plt.title('20 newsgroups (vectorized) F1-Score Metrics')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "classifications = [mse_logre_norm, mse_perc_norm, mse_svm_lk_norm, mse_svm_rbf_norm, mse_dtree_norm, mse_rforest_norm, mse_nnet_norm]\n",
    "scores = ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network')\n",
    "y_pos = np.arange(len(scores))\n",
    "plt.barh(y_pos, classifications)\n",
    "plt.yticks(y_pos, scores)\n",
    "plt.xlabel('Scores')\n",
    "plt.ylabel('Classifiers')\n",
    "plt.title('20 newsgroups (vectorized) Mean Squared Error Metrics')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "classifications = [hamloss_logre_norm, hamloss_perc_norm, hamloss_svm_lk_norm, hamloss_svm_rbf_norm, hamloss_dtree_norm, hamloss_rforest_norm, hamloss_nnet_norm]\n",
    "scores = ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network')\n",
    "y_pos = np.arange(len(scores))\n",
    "plt.barh(y_pos, classifications)\n",
    "plt.yticks(y_pos, scores)\n",
    "plt.xlabel('Scores')\n",
    "plt.ylabel('Classifiers')\n",
    "plt.title('20 newsgroups (vectorized) Hamming Loss Metrics')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Comparison plots of the classifiers' performance"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### (Analysis in Notebook 7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# data to plot\n",
    "n_groups = 7\n",
    "No_Normalazation = (acc_logre_nonorm, acc_perc_nonorm, acc_svm_lk_nonorm, acc_svm_rbf_nonorm, acc_dtree_nonorm, acc_rforest_nonorm, acc_nnet_nonorm)\n",
    "Feature_Standardization = (acc_logre_norm, acc_perc_norm, acc_svm_lk_norm, acc_svm_rbf_norm, acc_dtree_norm, acc_rforest_norm, acc_nnet_norm)\n",
    "\n",
    "# create plot\n",
    "fig, ax = plt.subplots()\n",
    "index = np.arange(n_groups)\n",
    "bar_width = 0.25\n",
    "opacity = 0.8\n",
    "plt.ylim(0.00, 1.0)\n",
    "\n",
    "rects1 = plt.bar(index, No_Normalazation, bar_width,\n",
    "alpha=opacity,\n",
    "color='b',\n",
    "label='No Normalazation')\n",
    "\n",
    "rects2 = plt.bar(index + bar_width, Feature_Standardization, bar_width,\n",
    "alpha=opacity,\n",
    "color='g',\n",
    "label='Feature Standardization')\n",
    "\n",
    "plt.xlabel('Classifiers')\n",
    "plt.ylabel('Scores')\n",
    "plt.title('20 newsgroups vectorized Classification Accuracy Metrics')\n",
    "plt.xticks(index + bar_width, ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network'), rotation = 45)\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "# data to plot\n",
    "n_groups = 7\n",
    "No_Normalazation = (f1_logre_nonorm, f1_perc_nonorm, f1_svm_lk_nonorm, f1_svm_rbf_nonorm, f1_dtree_nonorm, f1_rforest_nonorm, f1_nnet_nonorm)\n",
    "Feature_Standardization = (f1_logre_norm, f1_perc_norm, f1_svm_lk_norm, f1_svm_rbf_norm, f1_dtree_norm, f1_rforest_norm, f1_nnet_norm)\n",
    "\n",
    "# create plot\n",
    "fig, ax = plt.subplots()\n",
    "index = np.arange(n_groups)\n",
    "bar_width = 0.25\n",
    "opacity = 0.8\n",
    "plt.ylim(0.00, 1.0)\n",
    "\n",
    "rects1 = plt.bar(index, No_Normalazation, bar_width,\n",
    "alpha=opacity,\n",
    "color='b',\n",
    "label='No Normalazation')\n",
    "\n",
    "rects2 = plt.bar(index + bar_width, Feature_Standardization, bar_width,\n",
    "alpha=opacity,\n",
    "color='g',\n",
    "label='Feature Standardization')\n",
    "\n",
    "plt.xlabel('Classifiers')\n",
    "plt.ylabel('Scores')\n",
    "plt.title('20 newsgroups vectorized F1-Score Metrics')\n",
    "plt.xticks(index + bar_width, ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network'), rotation = 45)\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "# data to plot\n",
    "n_groups = 7\n",
    "No_Normalazation = (mse_logre_nonorm, mse_perc_nonorm, mse_svm_lk_nonorm, mse_svm_rbf_nonorm, mse_dtree_nonorm, mse_rforest_nonorm, mse_nnet_nonorm)\n",
    "Feature_Standardization = (mse_logre_norm, mse_perc_norm, mse_svm_lk_norm, mse_svm_rbf_norm, mse_dtree_norm, mse_rforest_norm, mse_nnet_norm)\n",
    "\n",
    "# create plot\n",
    "fig, ax = plt.subplots()\n",
    "index = np.arange(n_groups)\n",
    "bar_width = 0.25\n",
    "opacity = 0.8\n",
    "\n",
    "\n",
    "rects1 = plt.bar(index, No_Normalazation, bar_width,\n",
    "alpha=opacity,\n",
    "color='b',\n",
    "label='No Normalazation')\n",
    "\n",
    "rects2 = plt.bar(index + bar_width, Feature_Standardization, bar_width,\n",
    "alpha=opacity,\n",
    "color='g',\n",
    "label='Feature Standardization')\n",
    "\n",
    "plt.xlabel('Classifiers')\n",
    "plt.ylabel('Scores')\n",
    "plt.title('20 newsgroups vectorized Mean Squared Error Metrics')\n",
    "plt.xticks(index + bar_width, ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network'), rotation = 45)\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "# data to plot\n",
    "n_groups = 7\n",
    "No_Normalazation = (hamloss_logre_nonorm, hamloss_perc_nonorm, hamloss_svm_lk_nonorm, hamloss_svm_rbf_nonorm, hamloss_dtree_nonorm, hamloss_rforest_nonorm, hamloss_nnet_nonorm)\n",
    "Feature_Standardization = (hamloss_logre_norm, hamloss_perc_norm, hamloss_svm_lk_norm, hamloss_svm_rbf_norm, hamloss_dtree_norm, hamloss_rforest_norm, hamloss_nnet_norm)\n",
    "\n",
    "# create plot\n",
    "fig, ax = plt.subplots()\n",
    "index = np.arange(n_groups)\n",
    "bar_width = 0.25\n",
    "opacity = 0.8\n",
    "\n",
    "\n",
    "rects1 = plt.bar(index, No_Normalazation, bar_width,\n",
    "alpha=opacity,\n",
    "color='b',\n",
    "label='No Normalazation')\n",
    "\n",
    "rects2 = plt.bar(index + bar_width, Feature_Standardization, bar_width,\n",
    "alpha=opacity,\n",
    "color='g',\n",
    "label='Feature Standardization')\n",
    "\n",
    "plt.xlabel('Classifiers')\n",
    "plt.ylabel('Scores')\n",
    "plt.title('20 newsgroups vectorized Hamming Loss Metrics')\n",
    "plt.xticks(index + bar_width, ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network'), rotation = 45)\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
