{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Using the Optical recognition of handwritten digits Data Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the dataset\n",
    "from sklearn.datasets import load_digits\n",
    "digits = load_digits()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ".. _digits_dataset:\n",
      "\n",
      "Optical recognition of handwritten digits dataset\n",
      "--------------------------------------------------\n",
      "\n",
      "**Data Set Characteristics:**\n",
      "\n",
      "    :Number of Instances: 5620\n",
      "    :Number of Attributes: 64\n",
      "    :Attribute Information: 8x8 image of integer pixels in the range 0..16.\n",
      "    :Missing Attribute Values: None\n",
      "    :Creator: E. Alpaydin (alpaydin '@' boun.edu.tr)\n",
      "    :Date: July; 1998\n",
      "\n",
      "This is a copy of the test set of the UCI ML hand-written digits datasets\n",
      "https://archive.ics.uci.edu/ml/datasets/Optical+Recognition+of+Handwritten+Digits\n",
      "\n",
      "The data set contains images of hand-written digits: 10 classes where\n",
      "each class refers to a digit.\n",
      "\n",
      "Preprocessing programs made available by NIST were used to extract\n",
      "normalized bitmaps of handwritten digits from a preprinted form. From a\n",
      "total of 43 people, 30 contributed to the training set and different 13\n",
      "to the test set. 32x32 bitmaps are divided into nonoverlapping blocks of\n",
      "4x4 and the number of on pixels are counted in each block. This generates\n",
      "an input matrix of 8x8 where each element is an integer in the range\n",
      "0..16. This reduces dimensionality and gives invariance to small\n",
      "distortions.\n",
      "\n",
      "For info on NIST preprocessing routines, see M. D. Garris, J. L. Blue, G.\n",
      "T. Candela, D. L. Dimmick, J. Geist, P. J. Grother, S. A. Janet, and C.\n",
      "L. Wilson, NIST Form-Based Handprint Recognition System, NISTIR 5469,\n",
      "1994.\n",
      "\n",
      ".. topic:: References\n",
      "\n",
      "  - C. Kaynak (1995) Methods of Combining Multiple Classifiers and Their\n",
      "    Applications to Handwritten Digit Recognition, MSc Thesis, Institute of\n",
      "    Graduate Studies in Science and Engineering, Bogazici University.\n",
      "  - E. Alpaydin, C. Kaynak (1998) Cascading Classifiers, Kybernetika.\n",
      "  - Ken Tang and Ponnuthurai N. Suganthan and Xi Yao and A. Kai Qin.\n",
      "    Linear dimensionalityreduction using relevance weighted LDA. School of\n",
      "    Electrical and Electronic Engineering Nanyang Technological University.\n",
      "    2005.\n",
      "  - Claudio Gentile. A New Approximate Maximal Margin Classification\n",
      "    Algorithm. NIPS. 2000.\n"
     ]
    }
   ],
   "source": [
    "# Display a description of the dataset\n",
    "print(digits.DESCR)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 1 2 ... 8 9 8]\n"
     ]
    }
   ],
   "source": [
    "# print the target variables\n",
    "print(digits.target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Class labels: [0 1 2 3 4 5 6 7 8 9]\n"
     ]
    }
   ],
   "source": [
    "# print class labels\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "print('Class labels:', np.unique(digits.target))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "train_set, test_set, train_labels, test_labels = train_test_split(\n",
    "                              digits.data,               # features\n",
    "                              digits.target,             # labels\n",
    "                              test_size = 0.30,          # split ratio\n",
    "                              random_state = 1,          # set random seed\n",
    "                              stratify = digits.target)  # randomize based on labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Labels count in y: [178 182 177 183 181 182 181 179 174 180]\n",
      "Labels count in y_train: [124 127 124 128 127 127 127 125 122 126]\n",
      "Labels count in y_test: [54 55 53 55 54 55 54 54 52 54]\n"
     ]
    }
   ],
   "source": [
    "print('Labels count in y:', np.bincount(digits.target))\n",
    "print('Labels count in y_train:', np.bincount(train_labels))\n",
    "print('Labels count in y_test:', np.bincount(test_labels))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# No normalization (use raw features)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "x = train_set[:,0:64]      \n",
    "y = train_labels             \n",
    "lr = LogisticRegression(max_iter = 3000)\n",
    "lr.fit(x,y)\n",
    "y_pred = lr.predict(test_set)\n",
    "preds = y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---Confusion Matrix---\n",
      "col_0   0   1   2   3   4   5   6   7   8   9\n",
      "row_0                                        \n",
      "0      53   0   0   0   0   0   0   0   1   0\n",
      "1       0  54   1   0   1   0   0   0   2   0\n",
      "2       0   0  52   0   0   0   0   0   0   0\n",
      "3       0   0   0  52   0   0   0   0   0   0\n",
      "4       1   0   0   0  52   0   0   0   1   0\n",
      "5       0   0   0   1   0  53   1   0   0   1\n",
      "6       0   0   0   0   0   1  52   0   0   0\n",
      "7       0   0   0   0   1   0   0  53   2   0\n",
      "8       0   1   0   1   0   0   1   0  46   0\n",
      "9       0   0   0   1   0   1   0   1   0  53\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "#---generate table of predictions vs actual---\n",
    "print(\"---Confusion Matrix---\")\n",
    "print(pd.crosstab(y_pred, test_labels))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.9629629629629629\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_logre_nonorm = accuracy_score(test_labels, preds)\n",
    "print('Accuracy : ' ,acc_logre_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-Score :  0.9629020767392816\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_logre_nonorm = f1_score(test_labels, preds, average='weighted')\n",
    "print('F1-Score : ',f1_logre_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  0.687037037037037\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_logre_nonorm = mean_squared_error(test_labels, preds)\n",
    "print('Mean Squared Error : ', mse_logre_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.037037037037037035\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "y_true = test_labels\n",
    "y_pred = preds\n",
    "hamloss_logre_nonorm = hamming_loss(test_labels, preds)\n",
    "print('Hamming Loss : ' ,hamloss_logre_nonorm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Perceptron"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Perceptron(eta0=0.1, random_state=1)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import Perceptron\n",
    "ppn = Perceptron(eta0=0.1, random_state=1)\n",
    "ppn.fit(train_set, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 32\n"
     ]
    }
   ],
   "source": [
    "y_pred = ppn.predict(test_set)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.9407407407407408\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_perc_nonorm = accuracy_score(test_labels, y_pred)\n",
    "print('Accuracy : ' , acc_perc_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-Score :  0.9406659101650975\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_perc_nonorm = f1_score(test_labels, y_pred, average='weighted')\n",
    "print('F1-Score : ', f1_perc_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared error :  1.0907407407407408\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_perc_nonorm = mean_squared_error(test_labels, y_pred)\n",
    "print('Mean Squared error : ', mse_perc_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.05925925925925926\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_perc_nonorm = hamming_loss(test_labels, y_pred)\n",
    "print('Hamming Loss : ', hamloss_perc_nonorm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  Support Vector Machines"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### With Linear Kernel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(kernel='linear', random_state=1)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "svm = SVC(kernel='linear', C=1.0, random_state=1)\n",
    "svm.fit(train_set, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 15\n"
     ]
    }
   ],
   "source": [
    "y_pred = svm.predict(test_set)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.9722222222222222\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_svm_lk_nonorm = accuracy_score(test_labels, y_pred)\n",
    "print('Accuracy : ' ,acc_svm_lk_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-Score :  0.9720968256916844\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_svm_lk_nonorm = f1_score(test_labels, y_pred, average='weighted')\n",
    "print('F1-Score : ', f1_svm_lk_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  0.5944444444444444\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_svm_lk_nonorm = mean_squared_error(test_labels, y_pred)\n",
    "print('Mean Squared Error : ', mse_svm_lk_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.027777777777777776\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_svm_lk_nonorm = hamming_loss(test_labels, y_pred)\n",
    "print('Hamming Loss : ',hamloss_svm_lk_nonorm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### With RBF Kernel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(random_state=1)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "svm = SVC(kernel='rbf', C=1.0, random_state=1)\n",
    "svm.fit(train_set, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 9\n"
     ]
    }
   ],
   "source": [
    "y_pred = svm.predict(test_set)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.9833333333333333\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_svm_rbf_nonorm = accuracy_score(test_labels, y_pred)\n",
    "print('Accuracy : ', acc_svm_rbf_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-score : 0.98330859576617\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_svm_rbf_nonorm = f1_score(test_labels, y_pred, average='weighted')\n",
    "print('F1-score :',f1_svm_rbf_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  0.3277777777777778\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_svm_rbf_nonorm = mean_squared_error(test_labels, y_pred)\n",
    "print('Mean Squared Error : ',mse_svm_rbf_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.016666666666666666\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_svm_rbf_nonorm = hamming_loss(test_labels, y_pred)\n",
    "print('Hamming Loss : ',hamloss_svm_rbf_nonorm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(max_depth=4, random_state=1)"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "\n",
    "# Build a decision tree for classification tasks\n",
    "# citerion:  The function to measure the quality of a split. \n",
    "# max_depth: The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or\n",
    "#            until all leaves contain less than min_samples_split samples.\n",
    "# min_samples_split: The minimum number of samples required to split an internal node.\n",
    "# min_samples_leaf:  The minimum number of samples required to to be at a leaf node.\n",
    "tree_model = DecisionTreeClassifier(criterion = 'gini', max_depth = 4, random_state = 1)\n",
    "tree_model.fit(train_set, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 248\n"
     ]
    }
   ],
   "source": [
    "y_pred = tree_model.predict(test_set)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.5407407407407407\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_dtree_nonorm = accuracy_score(test_labels, y_pred)\n",
    "print('Accuracy : ', acc_dtree_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-score : 0.5190702093438568\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_dtree_nonorm = f1_score(test_labels, y_pred, average='weighted')\n",
    "print('F1-score :',f1_dtree_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  6.92037037037037\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_dtree_nonorm = mean_squared_error(test_labels, y_pred)\n",
    "print('Mean Squared Error : ',mse_dtree_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.45925925925925926\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_dtree_nonorm = hamming_loss(test_labels, y_pred)\n",
    "print('Hamming Loss : ',hamloss_dtree_nonorm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Random Forests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(n_estimators=25, n_jobs=-1, random_state=1)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "# Create a Random Forest comprised of 25 decision trees\n",
    "# citerion:  The function to measure the quality of a split. \n",
    "# max_depth: The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or\n",
    "#            until all leaves contain less than min_samples_split samples.\n",
    "# min_samples_split: The minimum number of samples required to split an internal node.\n",
    "# min_samples_leaf:  The minimum number of samples required to to be at a leaf node.\n",
    "forest = RandomForestClassifier(criterion='gini', n_estimators=25, random_state=1, n_jobs=-1)\n",
    "forest.fit(train_set, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 19\n"
     ]
    }
   ],
   "source": [
    "y_pred = forest.predict(test_set)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.9648148148148148\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_rforest_nonorm = accuracy_score(test_labels, y_pred)\n",
    "print('Accuracy : ', acc_rforest_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-score : 0.9646237450898114\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_rforest_nonorm = f1_score(test_labels, y_pred, average='weighted')\n",
    "print('F1-score :',f1_rforest_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  0.7648148148148148\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_rforest_nonorm = mean_squared_error(test_labels, y_pred)\n",
    "print('Mean Squared Error : ',mse_rforest_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.03518518518518519\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_rforest_nonorm = hamming_loss(test_labels, y_pred)\n",
    "print('Hamming Loss : ',hamloss_rforest_nonorm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Feed-forward Neural Network with two hidden layers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MLPClassifier(alpha=0.3, hidden_layer_sizes=(10, 11), max_iter=1000)"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.neural_network import MLPClassifier\n",
    "mlp = MLPClassifier(activation='relu', hidden_layer_sizes=(10,11), alpha = 0.3, max_iter = 1000)\n",
    "\n",
    "mlp.fit(train_set, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 26\n"
     ]
    }
   ],
   "source": [
    "y_pred = mlp.predict(test_set)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.9518518518518518\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_nnet_nonorm = accuracy_score(test_labels, y_pred)\n",
    "print('Accuracy : ', acc_nnet_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-score : 0.9518902749873144\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_nnet_nonorm = f1_score(test_labels, y_pred, average='weighted')\n",
    "print('F1-score :',f1_nnet_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  1.1425925925925926\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_nnet_nonorm = mean_squared_error(test_labels, y_pred)\n",
    "print('Mean Squared Error : ',mse_nnet_nonorm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.04814814814814815\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_nnet_nonorm = hamming_loss(test_labels, y_pred)\n",
    "print('Hamming Loss : ',hamloss_nnet_nonorm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Feature Standardization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "stdsc = StandardScaler()\n",
    "train_set_std = stdsc.fit_transform(train_set)\n",
    "test_set_std = stdsc.transform(test_set)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "x = train_set_std[:,0:64]      \n",
    "y = train_labels             \n",
    "lr = LogisticRegression(max_iter = 3000)\n",
    "lr.fit(x,y)\n",
    "y_pred = lr.predict(test_set_std)\n",
    "preds = y_pred"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---Confusion Matrix---\n",
      "col_0   0   1   2   3   4   5   6   7   8   9\n",
      "row_0                                        \n",
      "0      54   0   0   0   0   0   0   0   1   0\n",
      "1       0  53   1   0   0   0   0   0   2   0\n",
      "2       0   0  52   0   0   0   0   0   0   0\n",
      "3       0   0   0  53   0   0   0   0   0   0\n",
      "4       0   0   0   0  52   0   0   0   1   0\n",
      "5       0   0   0   1   0  53   1   0   0   1\n",
      "6       0   0   0   0   0   1  52   0   0   0\n",
      "7       0   0   0   0   1   0   0  53   0   0\n",
      "8       0   2   0   1   0   0   1   0  48   0\n",
      "9       0   0   0   0   1   1   0   1   0  53\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "#---generate table of predictions vs actual---\n",
    "print(\"---Confusion Matrix---\")\n",
    "print(pd.crosstab(y_pred, test_labels))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.9685185185185186\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_logre_norm = accuracy_score(test_labels, preds)\n",
    "print('Accuracy : ', acc_logre_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-Score :  0.9685827370942851\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_logre_norm = f1_score(test_labels, preds, average='weighted')\n",
    "print('F1-Score : ',f1_logre_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  0.7074074074074074\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_logre_norm = mean_squared_error(test_labels, preds)\n",
    "print('Mean Squared Error : ', mse_logre_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.03148148148148148\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_logre_norm = hamming_loss(test_labels, preds)\n",
    "print(\"Hamming Loss : \", hamloss_logre_norm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Perceptron"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Class labels: [0 1 2 3 4 5 6 7 8 9]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "\n",
    "print('Class labels:', np.unique(digits.target))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Perceptron(eta0=0.1, random_state=1)"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import Perceptron\n",
    "ppn = Perceptron(eta0=0.1, random_state=1)\n",
    "ppn.fit(train_set_std, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 36\n"
     ]
    }
   ],
   "source": [
    "y_pred = ppn.predict(test_set_std)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.9333333333333333\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_perc_norm = accuracy_score(test_labels, y_pred)\n",
    "print('Accuracy : ', accuracy_score(test_labels, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-Score :  0.9324143510344345\n"
     ]
    }
   ],
   "source": [
    "##ùëÄ2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_perc_norm = f1_score(test_labels, y_pred, average='weighted')\n",
    "print('F1-Score : ' , f1_perc_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  1.4\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_perc_norm = mean_squared_error(test_labels, y_pred)\n",
    "print('Mean Squared Error : ',mse_perc_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.06666666666666667\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_perc_norm = hamming_loss(test_labels, y_pred)\n",
    "print('Hamming Loss : ', hamloss_perc_norm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  Support Vector Machines"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### With Linear Kernel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(kernel='linear', random_state=1)"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "svm = SVC(kernel='linear', C=1.0, random_state=1)\n",
    "svm.fit(train_set_std, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 12\n"
     ]
    }
   ],
   "source": [
    "y_pred = svm.predict(test_set_std)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.9777777777777777\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_svm_lk_norm = accuracy_score(test_labels, y_pred)\n",
    "print('Accuracy : ' ,acc_svm_lk_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-Score :  0.9776569709067012\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_svm_lk_norm = f1_score(test_labels, y_pred, average='weighted')\n",
    "print('F1-Score : ', f1_svm_lk_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  0.5722222222222222\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_svm_lk_norm = mean_squared_error(test_labels, y_pred)\n",
    "print('Mean Squared Error : ',mse_svm_lk_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.022222222222222223\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_svm_lk_norm = hamming_loss(test_labels, y_pred)\n",
    "print('Hamming Loss : ',hamloss_svm_lk_norm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### With RBF Kernel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(random_state=1)"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "svm = SVC(kernel='rbf', C=1.0, random_state=1)\n",
    "svm.fit(train_set_std, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 6\n"
     ]
    }
   ],
   "source": [
    "y_pred = svm.predict(test_set_std)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.9888888888888889\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_svm_rbf_norm = accuracy_score(test_labels, y_pred)\n",
    "print('Accuracy : ' ,acc_svm_rbf_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-Score :  0.9888683427650519\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_svm_rbf_norm = f1_score(test_labels, y_pred, average='weighted')\n",
    "print('F1-Score : ',f1_svm_rbf_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  0.2388888888888889\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_svm_rbf_norm = mean_squared_error(test_labels, y_pred)\n",
    "print('Mean Squared Error : ',mse_svm_rbf_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming loss :  0.011111111111111112\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_svm_rbf_norm = hamming_loss(test_labels, y_pred)\n",
    "print('Hamming loss : ',hamloss_svm_rbf_norm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(max_depth=4, random_state=1)"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Decision Treefrom sklearn.tree import DecisionTreeClassifier\n",
    "\n",
    "# Build a decision tree for classification tasks\n",
    "# citerion:  The function to measure the quality of a split. \n",
    "# max_depth: The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or\n",
    "#            until all leaves contain less than min_samples_split samples.\n",
    "# min_samples_split: The minimum number of samples required to split an internal node.\n",
    "# min_samples_leaf:  The minimum number of samples required to to be at a leaf node.\n",
    "tree_model = DecisionTreeClassifier(criterion = 'gini', max_depth = 4, random_state = 1)\n",
    "tree_model.fit(train_set_std, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 248\n"
     ]
    }
   ],
   "source": [
    "y_pred = tree_model.predict(test_set_std)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.5407407407407407\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_dtree_norm = accuracy_score(test_labels, y_pred)\n",
    "print('Accuracy : ', acc_dtree_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-score : 0.5190702093438568\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_dtree_norm = f1_score(test_labels, y_pred, average='weighted')\n",
    "print('F1-score :',f1_dtree_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  6.92037037037037\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_dtree_norm = mean_squared_error(test_labels, y_pred)\n",
    "print('Mean Squared Error : ',mse_dtree_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.45925925925925926\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_dtree_norm = hamming_loss(test_labels, y_pred)\n",
    "print('Hamming Loss : ',hamloss_dtree_norm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Random Forests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(n_estimators=25, n_jobs=-1, random_state=1)"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "# Create a Random Forest comprised of 25 decision trees\n",
    "# citerion:  The function to measure the quality of a split. \n",
    "# max_depth: The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or\n",
    "#            until all leaves contain less than min_samples_split samples.\n",
    "# min_samples_split: The minimum number of samples required to split an internal node.\n",
    "# min_samples_leaf:  The minimum number of samples required to to be at a leaf node.\n",
    "forest = RandomForestClassifier(criterion='gini', n_estimators=25, random_state=1, n_jobs=-1)\n",
    "forest.fit(train_set_std, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 18\n"
     ]
    }
   ],
   "source": [
    "y_pred = y_pred = forest.predict(test_set_std)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.9666666666666667\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_rforest_norm = accuracy_score(test_labels, y_pred)\n",
    "print('Accuracy : ', acc_rforest_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-score : 0.9665748315429841\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_rforest_norm = f1_score(test_labels, y_pred, average='weighted')\n",
    "print('F1-score :',f1_rforest_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  0.6333333333333333\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_rforest_norm = mean_squared_error(test_labels, y_pred)\n",
    "print('Mean Squared Error : ',mse_rforest_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.03333333333333333\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_rforest_norm = hamming_loss(test_labels, y_pred)\n",
    "print('Hamming Loss : ',hamloss_rforest_norm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Feed-forward Neural Network with two hidden layers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MLPClassifier(alpha=0.3, hidden_layer_sizes=(10, 11), max_iter=1000)"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.neural_network import MLPClassifier\n",
    "mlp = MLPClassifier(activation='relu', hidden_layer_sizes=(10,11), alpha = 0.3, max_iter = 1000)\n",
    "\n",
    "mlp.fit(train_set_std, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Misclassified examples (All Features): 27\n"
     ]
    }
   ],
   "source": [
    "y_pred = mlp.predict(test_set_std)\n",
    "print('Misclassified examples (All Features): %d' % (test_labels != y_pred).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :  0.95\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ1 : Classification accuracy\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc_nnet_norm = accuracy_score(test_labels, y_pred)\n",
    "print('Accuracy : ', acc_nnet_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-score : 0.9498096755422588\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ2 : F1-score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_nnet_norm = f1_score(test_labels, y_pred, average='weighted')\n",
    "print('F1-score :',f1_nnet_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error :  0.7277777777777777\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ3 : Mean squared error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "mse_nnet_norm = mean_squared_error(test_labels, y_pred)\n",
    "print('Mean Squared Error : ',mse_nnet_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hamming Loss :  0.05\n"
     ]
    }
   ],
   "source": [
    "#ùëÄ4 : Hamming loss\n",
    "from sklearn.metrics import hamming_loss\n",
    "hamloss_nnet_norm = hamming_loss(test_labels, y_pred)\n",
    "print('Hamming Loss : ',hamloss_nnet_norm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plots"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## No Normalazation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### IRIS Classification Accuracy Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "classifications = [acc_logre_nonorm, acc_perc_nonorm, acc_svm_lk_nonorm, acc_svm_rbf_nonorm, acc_dtree_nonorm, acc_rforest_nonorm, acc_nnet_nonorm]\n",
    "scores = ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network')\n",
    "y_pos = np.arange(len(scores))\n",
    "plt.barh(y_pos, classifications)\n",
    "plt.yticks(y_pos, scores)\n",
    "plt.xlabel('Scores')\n",
    "plt.ylabel('Classifiers')\n",
    "plt.title('Digits Classification Accuracy Metrics')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAdIAAAEWCAYAAADSGRaUAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8vihELAAAACXBIWXMAAAsTAAALEwEAmpwYAAAoxklEQVR4nO3debgcVZ3/8ffHAIGQEEDQCQhcxbDIFiFsKgKKjCiKCwOMqAFxEEdA8YcaBRVEfVBGRURkGCUBlVVRQdREhaDIlgRCwiIgm+yLYAgQwITP7486V9rLXTqp7rt+Xs/TT3edc+rUtyrLt8+p6irZJiIiIpbPSwY6gIiIiKEsiTQiIqKGJNKIiIgakkgjIiJqSCKNiIioIYk0IiKihiTSiEFM0qmSPt/qttF/JN0oaZeBjiPaJ4k0YoBIukvSYkmLJP1d0hWSDpH0z3+Xtg+xfVwz/TW2lbSLpHuXM65dJD0v6cmG10WlbnNJMyQ9KqnPH6FLWl3S6ZIeLPt5q6TPLE9crVL2z5Iu6FK+VSmf1WQ/0yV9ua92tjez3VSfMTQlkUYMrHfYHgdsABwPfAb4wcCGBMD9tsc2vN5Ryv8BnAcc1GQ/3wLGApsC44F3Are3MlBJKyzHao8Ar5P00oayKcCtrYlqueOKISiJNGIQsL3Q9oXAvsAUSZvDi0c9kj4t6QFJ90v6cBlBvbqxraRVgV8D6zSMKNeRtJ2kOZKekPSQpG8uR5y32P4BcGOTq2wLnGX7cdvP2/6z7Z807M9mkn4r6bES0+dK+WhJJ5b9vL98Hl3qdpF0r6TPSHoQmCbpJZKmSrpd0t8knSdpzV7ieg74ObBf6XMUsA/w48ZGkjZpiO8WSfuU8oOB/YFPdxmx31Ximg88JWmFUrZb53Ykfa7EuUjSXEnrqfItSQ9LWihpfuffgRj8kkgjBhHb1wD3Ajt1rZP0VuCTwG7Aq4Gde+jjKWAP/nVUeT/wbeDbtlcDNqQaWbbbVcBXJB0oaWJjhaRxwO+A3wDrUO3T70v1UcAOwCRgK2A74OiG1f8NWJNqJH8wcDjwLqpjsg7wOPDdPmI7E/hg+fzvVF8O7m+Ib1Xgt8BZwMuA/wROkbSZ7dOoku7Xu4zYKe3eDqxue0mXbX6y1L8NWA34EPA0sDvwRmAjYHWqL1R/6yP+GCSSSCMGn/upkkRX+wDTbN9o+2ng2GXs9x/AqyWtZftJ21f10nadct6287XPMm6r02FUCedQ4CZJf5G0R6nbE3jQ9jdsP2N7ke2rS93+wJdsP2z7Eap9/UBDv88DX7T9rO3FwEeAo2zfa/tZ4Bhg796mV21fAawpaWOqhHpmlyZ7AnfZnmZ7ie1rgZ8Ce/exzyfZvqfE1dWHgaPLyN62r7f9N6o/m3HAJoBs32z7gT62E4NEEmnE4LMu8Fg35esA9zQs39NNm94cRDXi+bOk2ZL27KXt/bZXb3j1OXqVtH/DVPKvAWwvtv1V29sAL6UaBZ9fpl3Xo+fzpesAdzcs313KOj1i+5mG5Q2An3UmfuBmYCnw8j7C/iFVkt8V+FmXug2A7Ru/UFAl+H/ro8/e/ly63WfblwAnU42iH5J0mqTV+thODBJJpBGDiKRtqRLp5d1UPwC8omF5vV66etEVtbZvs/2fVNOUXwN+UqYvW8L2jxumkvfopv4J4KvAqsArqRLOhj10dz9VIuu0Pg3Trrx4/+4B9uiS/Fe2fV8fYf8Q+G/gV2WU37XPy7r0Odb2R3uIoafYuvbZ7T7bPql84diM6gvPp/qIPQaJJNKIQUDSamWEeA7wI9sLuml2HnCgpE0ljQG+0EuXDwEvlTS+YRvvl7S27eeBv5fipcsYpyStDKxUllfuvAioh/afl7StpJXKeh8v274F+CXwb5I+US4uGidp+7Lq2cDRktaWtFbZ1x/1EtqpVOdiNyjbXVvSXn3tj+07qc6rHtVN9S+BjSR9QNKK5bWtpE1L/UPAq/raRhffB46TNLEcyy0lvbT0u72kFYGngGdYxj+bGDhJpBED6yJJi6hGKkcB3wQO7K6h7V8DJwGXAn8BrixVz3bT9s9UyeiOMi25DvBW4EZJT1JdeLRfl+nRZmwALOaFq3YXUyXFnhiYBjxKNaJ8C/D2co52UVl+B/AgcBvVFCvAl4E5wHxgAXBtKevJt4ELgZnleF4FbN9L+xcCtC8vF2N1LV9EdRHQfiX2B6lG8p1fHH4AvKYc3583sy2qP9/zgJnAE6WPVaguPPo/qouk7qa60Oh/muwzBpjyYO+IoamMjG4ARndzdWhE9JOMSCOGEEnvLtOka1CNji5KEo0YWEmkEUPLR6juynM71Tm0j/bePCLaLVO7ERERNWREGhERUUNuqjzCrLXWWu7o6BjoMCIihpS5c+c+anvt7uqSSEeYjo4O5syZM9BhREQMKZLu7qkuU7sRERE1JJFGRETUkEQaERFRQxJpREREDUmkERERNSSRRkRE1JBEGhERUUMSaURERA25IcMIs+C+hXRMvXigw4iIaIm7jn/7QIeQEWlEREQdSaQRERE1JJFGRETUkEQaERFRQxJpREREDUmkERERNSSRRkRE1JBEGhERUcOgT6SSLOkbDctHSjqmH7Y7S9LkHsrnNCxPljSrj746JL2vDTF2SLqh1f1GRETzBn0iBZ4F3iNprVZ2qsry7v/LJO2xDO07gJYmUkmjWtlfREQsn6GQSJcApwFHdK2QtLakn0qaXV6vL+XHSDqyod0NZfTWIelmSacA1wLrSfqepDmSbpR0bJMxnQAc3U08oySdUGKZL+kjpep4YCdJ8yQdIelXkrYs61wn6Qvl83GSPlyS/Akl7gWS9i31u0i6VNJZwIIu235V6WvbJvchIiJaYKjca/e7wHxJX+9S/m3gW7Yvl7Q+MAPYtI++NgYOtP3fAJKOsv1YGeH9XtKWtuf30ceVwLsl7Qosaig/CFhoe1tJo4E/SZoJTAWOtL1n2eZoqsR6F9UXhdeX9d8A/Ah4DzAJ2ApYC5gt6Q+lzXbA5rbvlNRR+tsYOKfs17yuwUo6GDgYYNRqa/exaxERsSyGwogU208AZwKHd6naDThZ0jzgQmA1SeP66O5u21c1LO8j6VrgOmAz4DVNhvVlXjwq3R34YInnauClwMRu1v0j8EaqxHkxMFbSGKDD9i2l/GzbS20/BFwGdI40r7F9Z0NfawO/AN7fXRIFsH2a7cm2J48aM77J3YuIiGYMlREpwIlU07HTGspeAuxoe3FjQ0lL+NcvCSs3fH6qod0rgSOBbW0/Lml6l7Y9sn2JpOOAHRo3DRxme0aXeHbpsvpsYDJwB/BbqlHnfwFzG/rpyVNdlhcC91CNam9sJvaIiGidITEiBbD9GHAe1fRpp5nAoZ0LkiaVj3cBW5eyrYFX9tDtalSJaaGklwPLcgERwFeATzcszwA+KmnFsu2NJK1KNf37z5Gy7eeokt8+wFVUI9QjyzvAH4B9yznXtalGr9f0EMNzwLuoRsItvzI4IiJ6N2QSafENqtFbp8OByeXCnpuAQ0r5T4E1yxTrR4Fbu+vM9vVUU7o3AqcDf1qWYGz/Cnikoej7wE3AteVnKf9LNeqfDyyRdL2kzoum/gg8ZPvp8vkVvJBIf1bWuR64BPi07Qd7ieMpYE/gCEl7Lcs+REREPbI90DFEPxo9YaInTDlxoMOIiGiJ/nqwt6S5tl90bwEYeiPSiIiIQSWJNCIiooYk0oiIiBqSSCMiImpIIo2IiKhhKN2QIVpgi3XHM6efrnKLiBgJMiKNiIioIYk0IiKihiTSiIiIGpJIIyIiakgijYiIqCFX7Y4wC+5bSMfUiwc6jIiItuive+82yog0IiKihiTSiIiIGpJIIyIiakgijYiIqCGJNCIiooYk0oiIiBqSSCMiImpIIo2IiKhh0CZSSUslzZN0g6SLJK3eon4PkHRyK/rq0u8sSbeUmOdJ2rvV2yjb6ZD0vnb0HRERy27QJlJgse1JtjcHHgM+NtABNWH/EvMk2z9pZgVJy3p3qQ4giTQiYpAYzIm00ZXAugCStpN0haTryvvGpfwASRdI+o2k2yR9vXNlSQdKulXSZcDrG8o3kPR7SfPL+/qlfLqk70m6VNIdknaWdLqkmyVNbzZoSWtK+nnp/ypJW5byYySdJmkmcKaktSX9VNLs8np9abdzwwj3OknjgOOBnUrZEZI2k3RNWZ4vaWLdgx0REc0b9PfalTQKeDPwg1L0Z+CNtpdI2g34KvDeUjcJeC3wLHCLpO8AS4BjgW2AhcClwHWl/cnAmbbPkPQh4CTgXaVuDeBNwDuBi6gS8IeB2ZIm2Z7XTbg/lrS4fH4zcAxwne13SXoTcGaJkRLPG2wvlnQW8C3bl5dkPgPYFDgS+JjtP0kaCzwDTAWOtL1nOT7fAb5t+8eSVgJGdXMMDwYOBhi12trdHueIiFg+gzmRriJpHtVU5lzgt6V8PHBGGXkZWLFhnd/bXggg6SZgA2AtYJbtR0r5ucBGpf2OwHvK5x8CX2/o6yLblrQAeMj2grL+jSWmed3EvL/tOZ0Lkt5ASfK2L5H0UknjS/WFtjuT7m7AayR1rrpaGX3+CfimpB8DF9i+t6FNpyuBoyS9orS5rWsD26cBpwGMnjDR3cQdERHLaTBP7S62PYkqGa7EC+dIjwMuLedO3wGs3LDOsw2fl/LCF4Vmk0dju86+nu/S7/M0/wXkRVmvYRtPNZS9BNix4fzqurYX2T6eahS8CnCVpE1e1Jl9FtWoeTEwo4x8IyKinwzmRApAGWEeDhwpaUWqEel9pfqAJrq4GtiljAZXBP6joe4KYL/yeX/g8pYE/YI/lH6RtAvwqO0numk3Ezi0c0HSpPK+oe0Ftr8GzAE2ARYB4xravgq4w/ZJwIXAli3eh4iI6MVgntr9J9vXSbqeKul9nWpq95PAJU2s+4CkY6imQB8AruWF84iHA6dL+hTwCHBgi0M/BpgmaT7wNDClh3aHA98t7VagSsCHAJ+QtCvV6Pom4NdUI+Il5XhMpxqRv1/SP4AHgS+1eB8iIqIXsnPKbCQZPWGiJ0w5caDDiIhoi3Y92FvSXNuTu6sb9FO7ERERg1kSaURERA1JpBERETUkkUZERNSQRBoREVFDEmlEREQNQ+J3pNE6W6w7njltujw8ImIkyog0IiKihiTSiIiIGpJIIyIiakgijYiIqCEXG40wC+5bSMfUiwc6jIhutes+qRHtlBFpREREDUmkERERNSSRRkRE1JBEGhERUUMSaURERA1JpBERETUkkUZERNSQRBoREVHDsEukkpZKmifpRknXS/qkpOXaT0lfkrRbL/WHSPrg8kcLkrYo8c6T9JikO8vn39XpNyIi+sdwvLPRYtuTACS9DDgLGA98cVk7sv2FPupPXZ4Au/SxAJgEIGk68EvbP2lsI2kF20vqbisiIlpv2I1IG9l+GDgYOFSVUZJOkDRb0nxJH+lsK+nTkhaUUezxpWy6pL3L5+Ml3VTW+59SdoykI8vnSZKuKvU/k7RGKZ8l6WuSrpF0q6Sdmom9rPdVSZcBH5e0jaTLJM2VNEPShNJuQ0m/KeV/lLRJCw9hRET0YTiOSP+F7TvK1O7LgL2Ahba3lTQa+JOkmcAmwLuA7W0/LWnNxj7K8ruBTWxb0urdbOpM4DDbl0n6EtUI+BOlbgXb20l6Wynvcbq4i9Vt7yxpReAyYC/bj0jaF/gK8CHgNOAQ27dJ2h44BXhTl/gPpvpCwajV1m5y0xER0Yxhn0gLlffdgS07R5lUU74TqRLbNNtPA9h+rMv6TwDPAN+XdDHwy3/pXBpPlfQuK0VnAOc3NLmgvM8FOpYh7nPL+8bA5sBvJQGMAh6QNBZ4HXB+KQcY3bUT26dRJVxGT5joZdh+RET0YdgnUkmvApYCD1Ml1MNsz+jS5q1AjwnG9hJJ2wFvBvYDDqXLqK8Pz5b3pSzbMX+qM0TgRts7NlZKWg34e+c54YiI6H/D+hyppLWBU4GTbRuYAXy0TJUiaSNJqwIzgQ9JGlPKu07tjgXG2/4V1XTtpMZ62wuBxxvOf36Aaiq2VW4B1pa0Y4lnRUmb2X4CuFPSf5RySdqqhduNiIg+DMcR6SqS5gErAkuAHwLfLHXfp5pavVbVXOgjwLts/0bSJGCOpOeAXwGfa+hzHPALSStTjQ6P6Ga7U4BTSzK+AziwVTtk+7kyHX1SmUZeATgRuBHYH/iepKPLPp8DXN+qbUdERO9UDdRipBg9YaInTDlxoMOI6FYe7B2DlaS5tid3Vzesp3YjIiLaralEKuk/JI0rn4+WdIGkrdsbWkRExODX7Ij087YXSXoD8O9UP+/4XvvCioiIGBqaTaRLy/vbge/Z/gWwUntCioiIGDqaTaT3SfpfYB/gV+WuQDm/GhERI16zyXAfqt9gvtX234E1gU+1K6iIiIihos/fkZb71F5je/POMtsPAA+0M7Bojy3WHc+c/MQgIqJl+hyR2n4euF7S+v0QT0RExJDS7J2NJgA3SrqGF+7/iu13tiWqiIiIIaLZRHpsW6OIiIgYoppKpOUZmxsAE23/rtxPdlR7Q4uIiBj8mkqkkv6L6sHQawIbAutSPVXlze0LLdphwX0L6Zh68UCHERHRr9p5H+dmf/7yMeD1VA+4xvZtwMvaFVRERMRQ0Wwifdb2c50LklaglwdhR0REjBTNJtLLJH2O6lmfbwHOBy5qX1gRERFDQ7OJdCrVQ7AXAB+hevD10e0KKiIiYqho9qrd54H/K6+IiIgoek2kks6zvY+kBXRzTtT2lm2LLCIiYgjoa0T6ifK+Z5vjiIiIGJL6SqS/BLYGvmz7A/0QT0RExJDSVyJdSdIU4HWS3tO10vYF7Qlr8JF0FPA+qoecP0910dUewGjbn21oNwk42/amku4C7rG9U0P9PGCFxqfplPIO4GbgFqqHps8BDrL9D0m7AL8A7qS6QOxh4H22H5Z0AHACcF/par7tD7Zw1yMiohd9XbV7CLADsDrwji6vETPdK2lHqv3dupwX3g24Bzgb2LdL8/2AsxqWx0lar/SzaR+but32JGAL4BVUz4Ht9Efbk8r2Z1PdJKPTuaVuUpJoRET/6nVEavty4HJJc2z/oJ9iGowmAI/afhbA9qOdFZL+Lml721eXon2Af29Y9zyqZPs/wH9SJd9ep8ltLy1P2lm3a50kAeOAvyz/7kRERKv0OiKV9Kby8XFJ7+n66of4BouZwHqSbpV0iqSdG+rOphqFImkH4G/lFoqdfgJ0Hqt30MSNLCStDGwP/KaheKcyLfxXqhHx6Q11+0qaV14HdtPfwZLmSJqz9OmFfW0+IiKWQV9Tu50Jo+u07oia2rX9JLAN1Y37HwHOLecmAc4B9pb0EqqEenaX1R+j+iKyH9U50Kd72dSGJVn+Dfir7fkNdZ1Tu+sB04CvN9Q1Tu1O6yb+02xPtj151JjxTe51REQ0o6+p3S+W9xeNckYa20uBWcCs8rvaKcB02/eUi4p2Bt4L7NjN6ucC3wUO6GMzt9ueJGlC2c47bV/YTbsLgZ8u145ERERLNXWLQEkfl7SaKt+XdK2k3dsd3GAhaWNJExuKJgF3NyyfDXyLKhHe200XP6MaQc5oZnu2H6C6LeNne2jyBuD2ZvqKiIj2avZeux+y/QSwO9Xj0w4Ejm9bVIPPWOAMSTdJmg+8Bjimof58YDOqad4Xsb3I9tcan6DThJ8DYyR1/nRmp3IO9Hqqi5X+3zLuQ0REtEFT99oFVN7fBkyzfX25enREsD0XeF0v9Y8AK3ZT3tFN2V3A5n2V2zawVUOTbk9u2p4OTO8ptoiIaK9mR6RzJc2kSqQzJI2juilBRETEiNbsiPQgqvOCd9h+WtKaVNO7ERERI1qzI9IdgVts/13S+6meRZofJEZExIjXbCL9HvC0pK2AT1NdsXpm26KKiIgYIppNpEvKxS97Ad+2/W2q29RFRESMaM2eI10k6bPA+4E3ShpFN1epRkREjDTNJtJ9qR4hdpDtByWtT/Xorhhitlh3PHOOf/tAhxERMWw0lUhtPwh8s2H5r+QcaURERNO3CNxB0mxJT0p6TtJSSblqNyIiRrxmLzY6mepZmrcBqwAfproJe0RExIjW7DlSbP9F0qjyFJRpkq5oY1wRERFDQrOJ9GlJKwHzJH0deABYtX1hRUREDA3NJtIPAKOAQ4EjgPWonr0ZQ8yC+xbSMfXigQ4jIqKt7urHXyc0e9Vu57M3FwPHti+ciIiIoaXXRCppAeCe6m1v2fKIIiIihpC+RqTvAV4O3NOlfAPg/rZEFBERMYT09fOXbwFP2L678QU8XeoiIiJGtL4SaYft+V0Lbc8BOtoSUURExBDSVyJduZe6VVoZSERExFDUVyKdLem/uhZKOgiY256QIiIiho6+Ljb6BPAzSfvzQuKcDKwEvLuNcbWdpKOonmizFHge+AiwBzDa9mcb2k0Czra9qaS7gHts79RQPw9YwfbmXfrvAH7ZTfmXgD/Y/l0bdisiIvpZr4nU9kPA6yTtCnQmhIttX9L2yNpI0o7AnsDWtp+VtBbVl4OzgV8Dn21ovh9wVsPyOEnr2b5H0qbLum3bX6gRep8abuMYERH9oKmb1tu+1PZ3ymtIJ9FiAvCo7WcBbD9q+37btwB/l7R9Q9t9gHMals+jej4rVDfyP3tZNixpuqS9y+e7JB0r6VpJCyRtUspXlXR6eeLOdZL2KuUdkv5Y2l8r6XWlfBdJl0o6C1iwzEcjIiKWW7NPfxluZgLrSbpV0imSdm6oO5tqFIqkHYC/2b6tof4nVL+vBXgHcFHNWB61vTXwPeDIUnYUcIntbYFdgRMkrQo8DLyltN8XOKmhn+2Ao2y/pusGJB0saY6kOUufztPvIiJaaUQmUttPAtsABwOPAOdKOqBUnwPsLeklVAm164jzMeBxSfsBN1P9praOC8r7XF74SdHuwNRy/nUW1dXT6wMrAv9X7jh1PtCYNK+xfWd3G7B9mu3JtiePGjO+ZrgREdGo6ceoDTflPOIsYFZJTFOA6eXc513AzlQ35t+xm9XPpXoe6wEtCOXZ8r6UF/48BLy3TDX/k6RjgIeArai+BD3TUP1UC2KJiIhlNCJHpJI2ljSxoWgScHfD8tlUd2663fa93XTxM+DrwIw2hTgDOEySACS9tpSPBx6w/TwvPJEnIiIG0IhMpMBY4AxJN0maTzVFekxD/fnAZvzrRUb/ZHuR7a/Zfq6P7Wws6d6G1380Gd9xVNO48yXdUJYBTgGmSLoK2IiMQiMiBpzsHh/uEsPQ6AkTPWHKiQMdRkREW7X6eaSS5tqe3F3dSB2RRkREtEQSaURERA1JpBERETUkkUZERNSQRBoREVFDEmlEREQNI/bORiPVFuuOZ06LLwuPiBjJMiKNiIioIYk0IiKihiTSiIiIGpJIIyIiakgijYiIqCFX7Y4wC+5bSMfUiwc6jIiI5dLqm9G3QkakERERNSSRRkRE1JBEGhERUUMSaURERA1JpBERETUkkUZERNSQRBoREVHDiE+kkpZKmifpBknnSxozADG8S9Jr+nu7ERFR34hPpMBi25Nsbw48BxzSzEqSWnkzi3cB3SbSFm8nIiJaLIn0X/0ReLWkVSWdLmm2pOsk7QUg6YAyar0ImClprKRpkhZImi/pvaXd7pKulHRtaT+2lN8l6WuSrimvV0t6HfBO4IQyMt5Q0ixJX5V0GfBxSW8ucSwocY1u6O/Ysp0FkjYZkKMWETGCJZEWZeS3B7AAOAq4xPa2wK5USW7V0nRHYIrtNwGfBxba3sL2lsAlktYCjgZ2s701MAf4ZMOmnrC9HXAycKLtK4ALgU+VkfHtpd3qtncGvgtMB/a1vQXVbR0/2tDfo2U73wOO7GHfDpY0R9KcpU8vXP6DFBERL5JECqtImkeV8P4K/ADYHZhaymcBKwPrl/a/tf1Y+bwbVaIDwPbjwA5U07R/KutPATZo2N7ZDe879hLXueV9Y+BO27eW5TOANza0u6C8zwU6uuvI9mm2J9uePGrM+F42GRERyyrn38o50sYCSQLea/uWLuXbA081FgHu0p+oku1/9rA99/C5q87tqJc2AM+W96XkzzMiot9lRNq9GcBhJaEi6bU9tJsJHNq5IGkN4Crg9ZJeXcrGSNqoYZ19G96vLJ8XAeN62MafgY7O/oAPAJct2+5ERES7JJF27zhgRWC+pBvKcne+DKxRfjpzPbCr7UeAA4CzJc2nSqyNFwGNlnQ18HHgiFJ2DvCpckHRho0bsP0McCBwvqQFwPPAqa3YyYiIqE92b7OL0UqS7gIm2350oGIYPWGiJ0w5caA2HxFRy0A9j1TSXNuTu6vLiDQiIqKGXJzSj2x3DHQMERHRWhmRRkRE1JBEGhERUUMSaURERA1JpBERETXkYqMRZot1xzNngC4fj4gYjjIijYiIqCGJNCIiooYk0oiIiBqSSCMiImpIIo2IiKghV+2OMAvuW0jH1IsHOoyIiJYbqBvaZ0QaERFRQxJpREREDUmkERERNSSRRkRE1JBEGhERUUMSaURERA1JpBERETW0LZFKerIFfUyWdFIv9R2S3tds+27WnyXpFknXS5otaVLNkFtG0jslTR3oOCIioneD+oYMtucAc3pp0gG8Dziryfbd2d/2HEkHAicAb1mOUP+FpFG2l9bpw/aFwIV1Y4mIiPbq16ldSZMkXSVpvqSfSVqjlG9byq6UdIKkG0r5LpJ+WT7vLGleeV0naRxwPLBTKTuiS/uxkqZJWlD6fm8f4V0JrFvWXVXS6WWUep2kvUr5GEnnlf7OlXS1pMml7klJX5J0NbCjpPdLuqbE9r+SRpXXdEk3lLiOKOseLumm0u85pewASSeXzxtI+n2p/72k9Uv5dEknSbpC0h2S9m7hH1dERDShv8+Rngl8xvaWwALgi6V8GnCI7R2BnkZyRwIfsz0J2AlYDEwF/mh7ku1vdWn/eWCh7S3K9i7pI7a3Aj8vn48CLrG9LbArcIKkVYH/Bh4v/R0HbNOw/qrADba3B/4G7Au8vsS7FNgfmASsa3tz21uU/absx2tLv4d0E9vJwJml/sdA4/T1BOANwJ5UXyxeRNLBkuZImrP06YV9HIaIiFgW/ZZIJY0HVrd9WSk6A3ijpNWBcbavKOVn9dDFn4BvSjq89LOkj03uBny3c8H24z20+7Gke4HPAN8pZbsDUyXNA2YBKwPrUyWsc0p/NwDzG/pZCvy0fH4zVZKdXfp4M/Aq4A7gVZK+I+mtwBOl/fwSx/uB7vZrR144Lj8scXT6ue3nbd8EvLy7HbR9mu3JtiePGjO+h8MQERHLYzBctatmGtk+HvgwsApwlaRNmujXTXS9P/BKqkTVmXgFvLeMdCfZXt/2zX3E+kzDeVEBZzSsv7HtY0oy34oqOX8M+H5p//ay7W2AuZL6OnfduF/PNnxu6lhGRETr9Fsitb0QeFzSTqXoA8BlJbkskrRDKd+vu/UlbWh7ge2vUV1QtAmwCBjXwyZnAoc2rL9GL7H9Azga2EHSpsAM4DBJKuu+tjS9HNinlL0G2KKHLn8P7C3pZaXtmuU851rAS2z/lGrqeWtJLwHWs30p8GlgdWBsl/6u4IXjsn+JIyIiBoF2XrU7pkyZdvomMAU4VdIYqmnOA0vdQcD/SXqKarTW3Ym8T0jalWoK9Sbg18DzwBJJ1wPTgesa2n8Z+G65cGkpcCxwQU/B2l4s6RtU52IPBU4E5pdkehfVOchTgDMkzS/bmt9drLZvknQ0MLMkyn9QjUAXA9NKGcBngVHAj8rUt4Bv2f57yeGdDgdOl/Qp4JGG4xYREQNMdjOzn20OQhpr+8nyeSowwfbHBzisF5E0CljR9jOSNqQaeW5k+7kBDq1poydM9IQpJw50GBERLdfO55FKmmt7cnd1g+V3pG+X9FmqeO4GDhjYcHo0BrhU0opUo8ePDqUkGhERrTcoEqntc4FzBzqOvtheBHT7jSQiIkamwXDVbkRExJCVRBoREVFDEmlEREQNSaQRERE1DIqLjaL/bLHueOa08RLxiIiRJiPSiIiIGpJIIyIiakgijYiIqCGJNCIiooYk0oiIiBqSSCMiImpIIo2IiKghiTQiIqKGJNKIiIgaBsWDvaP/SFoE3DLQcQywtYBHBzqIAZZjkGMw0vcflu0YbGB77e4qcovAkeeWnp7yPlJImpNjkGMw0o/BSN9/aN0xyNRuREREDUmkERERNSSRjjynDXQAg0COQY4B5BiM9P2HFh2DXGwUERFRQ0akERERNSSRRkRE1JBEOkxJequkWyT9RdLUbuol6aRSP1/S1gMRZzs1cQz2L/s+X9IVkrYaiDjbpa/9b2i3raSlkvbuz/j6QzPHQNIukuZJulHSZf0dY7s18e9gvKSLJF1fjsGBAxFnu0g6XdLDkm7oob7+/4W28xpmL2AUcDvwKmAl4HrgNV3avA34NSBgB+DqgY57AI7B64A1yuc9htMxaGb/G9pdAvwK2Hug4x6AvwOrAzcB65fllw103ANwDD4HfK18Xht4DFhpoGNv4TF4I7A1cEMP9bX/L8yIdHjaDviL7TtsPwecA+zVpc1ewJmuXAWsLmlCfwfaRn0eA9tX2H68LF4FvKKfY2ynZv4OABwG/BR4uD+D6yfNHIP3ARfY/iuA7eF2HJo5BgbGSRIwliqRLunfMNvH9h+o9qkntf8vTCIdntYF7mlYvreULWuboWxZ9+8gqm+lw0Wf+y9pXeDdwKn9GFd/aubvwEbAGpJmSZor6YP9Fl3/aOYYnAxsCtwPLAA+bvv5/glvUKj9f2FuETg8qZuyrr9zaqbNUNb0/knalSqRvqGtEfWvZvb/ROAztpdWg5Fhp5ljsAKwDfBmYBXgSklX2b613cH1k2aOwb8D84A3ARsCv5X0R9tPtDm2waL2/4VJpMPTvcB6DcuvoPq2uaxthrKm9k/SlsD3gT1s/62fYusPzez/ZOCckkTXAt4maYntn/dLhO3X7L+DR20/BTwl6Q/AVsBwSaTNHIMDgeNdnTD8i6Q7gU2Aa/onxAFX+//CTO0OT7OBiZJeKWklYD/gwi5tLgQ+WK5Y2wFYaPuB/g60jfo8BpLWBy4APjCMRiCd+tx/26+03WG7A/gJ8N/DKIlCc/8OfgHsJGkFSWOA7YGb+znOdmrmGPyVakSOpJcDGwN39GuUA6v2/4UZkQ5DtpdIOhSYQXXV3um2b5R0SKk/leoqzbcBfwGepvpWOmw0eQy+ALwUOKWMypZ4mDwNo8n9H9aaOQa2b5b0G2A+8Dzwfdvd/kxiKGry78FxwHRJC6imOT9je9g8Xk3S2cAuwFqS7gW+CKwIrfu/MLcIjIiIqCFTuxERETUkkUZERNSQRBoREVFDEmlEREQNSaQRERE1JJFGREtJOqo8RWR+earK9gMdU0Q75XekEdEyknYE9gS2tv2spLWonjqyvP2tYHvY3EA9hqeMSCOilSZQ3XLvWQDbj9q+vzzz9IryzMtrJI2TtLKkaZIWSLqu3PMYSQdIOl/SRcBMSauWZ0rOLu32Ku02K33NK6PfiQO32zGS5YYMEdEyksYClwNjgN8B5wJXAn8G9rU9W9JqVHeQ+Tiwue0DJW0CzKR6Gst+wJeBLW0/JumrwE22fyRpdap7wL4WOB64yvaPy+3vRtle3J/7GwGZ2o2IFrL9pKRtgJ2AXakS6VeAB2zPLm2eAJD0BuA7pezPku6mSqQAv7Xd+QzJ3YF3SjqyLK8MrE+VoI+S9AqqZ4re1vYdjOhGEmlEtJTtpcAsYFa5f+vH6P6xVL09u+2pLu3ea/uWLm1ulnQ18HZghqQP275k+SOPWD45RxoRLSNp4y7nKidRPU1lHUnbljbjJK0A/AHYv5RtRDXK7Josobrh+mEqTxaQ9Nry/irgDtsnUT3BY8u27FREHzIijYhWGgt8p5zLXEL1RI2DgWmlfBVgMbAbcApwahm1LgEOKFf6du3zOKqHkM8vyfQuqiuD9wXeL+kfwIPAl9q6ZxE9yMVGERERNWRqNyIiooYk0oiIiBqSSCMiImpIIo2IiKghiTQiIqKGJNKIiIgakkgjIiJq+P/rSv/btR/bDAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "classifications = [f1_logre_nonorm, f1_perc_nonorm, f1_svm_lk_nonorm, f1_svm_rbf_nonorm, f1_dtree_nonorm, f1_rforest_nonorm, f1_nnet_nonorm]\n",
    "scores = ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network')\n",
    "y_pos = np.arange(len(scores))\n",
    "plt.barh(y_pos, classifications)\n",
    "plt.yticks(y_pos, scores)\n",
    "plt.xlabel('Scores')\n",
    "plt.ylabel('Classifiers')\n",
    "plt.title('Digits F1-Score Metrics')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "classifications = [mse_logre_nonorm, mse_perc_nonorm, mse_svm_lk_nonorm, mse_svm_rbf_nonorm, mse_dtree_nonorm, mse_rforest_nonorm, mse_nnet_nonorm]\n",
    "scores = ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network')\n",
    "y_pos = np.arange(len(scores))\n",
    "plt.barh(y_pos, classifications)\n",
    "plt.yticks(y_pos, scores)\n",
    "plt.xlabel('Scores')\n",
    "plt.ylabel('Classifiers')\n",
    "plt.title('Digits Mean Squared Error Metrics')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "classifications = [hamloss_logre_nonorm, hamloss_perc_nonorm, hamloss_svm_lk_nonorm, hamloss_svm_rbf_nonorm, hamloss_dtree_nonorm, hamloss_rforest_nonorm, hamloss_nnet_nonorm]\n",
    "scores = ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network')\n",
    "y_pos = np.arange(len(scores))\n",
    "plt.barh(y_pos, classifications)\n",
    "plt.yticks(y_pos, scores)\n",
    "plt.xlabel('Scores')\n",
    "plt.ylabel('Classifiers')\n",
    "plt.title('Digits Hamming Loss Metrics')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Feature Standardization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### IRIS Classification Accuracy Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "classifications = [acc_logre_norm, acc_perc_norm, acc_svm_lk_norm, acc_svm_rbf_norm, acc_dtree_norm, acc_rforest_norm, acc_nnet_norm]\n",
    "scores = ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network')\n",
    "y_pos = np.arange(len(scores))\n",
    "plt.barh(y_pos, classifications)\n",
    "plt.yticks(y_pos, scores)\n",
    "plt.xlabel('Scores')\n",
    "plt.ylabel('Classifiers')\n",
    "plt.title('Digits Classification Accuracy Metrics')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "classifications = [f1_logre_norm, f1_perc_norm, f1_svm_lk_norm, f1_svm_rbf_norm, f1_dtree_norm, f1_rforest_norm, f1_nnet_norm]\n",
    "scores = ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network')\n",
    "y_pos = np.arange(len(scores))\n",
    "plt.barh(y_pos, classifications)\n",
    "plt.yticks(y_pos, scores)\n",
    "plt.xlabel('Scores')\n",
    "plt.ylabel('Classifiers')\n",
    "plt.title('Digits F1-Score Metrics')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "classifications = [mse_logre_norm, mse_perc_norm, mse_svm_lk_norm, mse_svm_rbf_norm, mse_dtree_norm, mse_rforest_norm, mse_nnet_norm]\n",
    "scores = ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network')\n",
    "y_pos = np.arange(len(scores))\n",
    "plt.barh(y_pos, classifications)\n",
    "plt.yticks(y_pos, scores)\n",
    "plt.xlabel('Scores')\n",
    "plt.ylabel('Classifiers')\n",
    "plt.title('Digits Mean Squared Error Metrics')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "classifications = [hamloss_logre_norm, hamloss_perc_norm, hamloss_svm_lk_norm, hamloss_svm_rbf_norm, hamloss_dtree_norm, hamloss_rforest_norm, hamloss_nnet_norm]\n",
    "scores = ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network')\n",
    "y_pos = np.arange(len(scores))\n",
    "plt.barh(y_pos, classifications)\n",
    "plt.yticks(y_pos, scores)\n",
    "plt.xlabel('Scores')\n",
    "plt.ylabel('Classifiers')\n",
    "plt.title('Digits Hamming Loss Metrics')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Comparison plots of the classifiers' performance"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### (Analysis in Notebook 7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# data to plot\n",
    "n_groups = 7\n",
    "No_Normalazation = (acc_logre_nonorm, acc_perc_nonorm, acc_svm_lk_nonorm, acc_svm_rbf_nonorm, acc_dtree_nonorm, acc_rforest_nonorm, acc_nnet_nonorm)\n",
    "Feature_Standardization = (acc_logre_norm, acc_perc_norm, acc_svm_lk_norm, acc_svm_rbf_norm, acc_dtree_norm, acc_rforest_norm, acc_nnet_norm)\n",
    "\n",
    "# create plot\n",
    "fig, ax = plt.subplots()\n",
    "index = np.arange(n_groups)\n",
    "bar_width = 0.25\n",
    "opacity = 0.8\n",
    "plt.ylim(0.00, 1.0)\n",
    "\n",
    "rects1 = plt.bar(index, No_Normalazation, bar_width,\n",
    "alpha=opacity,\n",
    "color='b',\n",
    "label='No Normalazation')\n",
    "\n",
    "rects2 = plt.bar(index + bar_width, Feature_Standardization, bar_width,\n",
    "alpha=opacity,\n",
    "color='g',\n",
    "label='Feature Standardization')\n",
    "\n",
    "plt.xlabel('Classifiers')\n",
    "plt.ylabel('Scores')\n",
    "plt.title('Digits Classification Accuracy Metrics')\n",
    "plt.xticks(index + bar_width, ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network'), rotation = 45)\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "# data to plot\n",
    "n_groups = 7\n",
    "No_Normalazation = (f1_logre_nonorm, f1_perc_nonorm, f1_svm_lk_nonorm, f1_svm_rbf_nonorm, f1_dtree_nonorm, f1_rforest_nonorm, f1_nnet_nonorm)\n",
    "Feature_Standardization = (f1_logre_norm, f1_perc_norm, f1_svm_lk_norm, f1_svm_rbf_norm, f1_dtree_norm, f1_rforest_norm, f1_nnet_norm)\n",
    "\n",
    "# create plot\n",
    "fig, ax = plt.subplots()\n",
    "index = np.arange(n_groups)\n",
    "bar_width = 0.25\n",
    "opacity = 0.8\n",
    "plt.ylim(0.00, 1.0)\n",
    "\n",
    "rects1 = plt.bar(index, No_Normalazation, bar_width,\n",
    "alpha=opacity,\n",
    "color='b',\n",
    "label='No Normalazation')\n",
    "\n",
    "rects2 = plt.bar(index + bar_width, Feature_Standardization, bar_width,\n",
    "alpha=opacity,\n",
    "color='g',\n",
    "label='Feature Standardization')\n",
    "\n",
    "plt.xlabel('Classifiers')\n",
    "plt.ylabel('Scores')\n",
    "plt.title('Digits F1-Score Metrics')\n",
    "plt.xticks(index + bar_width, ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network'), rotation = 45)\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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WGQ5lFIQBDVBKKYK0KRJE4477jiuv/76xbZ99tln7LbbbnTp0oXddtuNzz//vNx99O7dm3fffZfJkycvtu2hhx6ic+fOdOrUiXPPPbd0fatWrbj44ovZeuutGTNmDK1ateLcc89lyy23pFevXvzrX/+iZ8+ebLDBBjz11FOAj4x23HFHunXrRrdu3cpVFktqc/HFF9O1a1e6du3KOuuswzHHeKHbAw44gC233JKOHTty++23A3Deeefxww8/0LVrV/r3718qL7iX25AhQ+jUqROdO3fmkUe8oOuLL75Iz549Ofjgg9lkk03o378/kd0+CIKyhGKqICeffDLDhg1j1qxZi6w/5ZRTOOqoo3jrrbfo378/p512Wrnfb9SoEeecc85io4zp06dz7rnnMmrUKEpKShg7diwjRowAYO7cuXTq1Ik333yTHXbYgblz59KzZ0/Gjx9P69atufDCC3nuued48sknufjiiwFYffXVee6555gwYQKPPPJIufIsqc2ll15KSUkJL730EquuuiqnnHIKAHfffTfjx49n3Lhx3HTTTXz77bdcddVVLLfccpSUlDBs2LBF9v/EE09QUlLCpEmTeP755xkyZAhffvklABMnTuSGG27gvffe45NPPuG115ZVZTwIgoZGKKYKssIKK3DUUUdx0003LbJ+zJgxHHHEEQAceeSRvPrqq0vcxxFHHMEbb7zBp59+Wrpu7Nix9OzZkzZt2tCkSRP69+/Pyy+/DEDjxo056KCDSts2a9aMvfbaC4DOnTuz884707RpUzp37syUKVMAD0geNGgQnTt3pl+/frz33nuLybG0NmZG//79OeOMM9hyyy0BuOmmm9h8883ZZpttmDp1Kh9++OFSf6tXX32Vww8/nMaNG7PGGmuw8847M3bsWAC22mor2rZtS6NGjejatWup3EEQBDnqnPNDMRk8eDDdunUrNXGVx9Lcjps0acJZZ53F1VdfXbpuaaasFi1a0Lhx49Llpk2blu6/UaNGNG/evPT/+fO9+vn111/PGmuswaRJk1i4cCEtWrRYbL9LazN06FDatm1beo4vvvgizz//PGPGjKFly5b07NlzmfE+SzunnMzgijcndxAEQY4YMVWCVVZZhUMOOYS77rqrdN12223Hww8/DMCwYcPYYYcdlrqPAQMG8PzzzzNjxgwAtt56a1566SVmzpzJggULeOihh9h5552rLOOsWbNYa621aNSoEQ888EC5ThNLajNy5Eiee+65RUaFs2bNYuWVV6Zly5Z88MEHvPHGG6XbmjZtyrx58xbb/0477cQjjzzCggULmDFjBi+//DJbbbVVlc8pCIKGRZ0bMRW7XNNZZ53FLbfcUrp80003MXDgQK655hratGnDPffcs9TvN2vWjNNOO43TTz8dgLXWWosrr7ySXXbZBTNjn332Yf/996+yfCeddBIHHXQQjz32GLvssgvLL798hdtcd911TJ8+vVSJ7LffflxwwQXcdtttdOnShQ4dOrDNNtuU7ue4446jS5cudOvWbZF5pr59+zJmzBg233xzJPH73/+eNddckw8++KDK5xUEQcNBWfKK6t69u5UtFPj++++z6aabFkmioCER91pkfghqFknjzazSN0iY8oIgCIJMEYopCIIgyBShmIIgCIJMEYopCIIgyBShmIIgCIJMUVDFJGklScMlfSDpfUnbFvJ4QRAEQd2n0HFMNwL/NLODJTUDWlZ3h91vr9m6FxVxW23cuDGdO3cuXR4xYkSly1WMGDGCjTfemM0226yyIi6ThQsXMnjwYEaNGoUkWrRowaOPPsr666+/WGmK6tKqVSvmzJlT5e8PHTqUVq1acfbZZ3PxxRez00470atXr0rto+xvWdX9BEGQTQqmmCStAOwEDAAws5+Bnwt1vEKSS1ZaHUaMGEHv3r0rpZjmz59PkybLvkSPPPII06dP56233qJRo0ZMmzatNGi2phVTZTAzzIxGjcofmF966aVV2m/Z37Kq+wmCIJsU0pS3ATADuEfSREl3SlosDYGk4ySNkzQul6anLjB+/Hh23nlnttxyS/bcc8/S7Nl33HEHPXr0YPPNN+eggw7i+++/5/XXX+epp55iyJAhdO3alY8//piePXuSCyaeOXNm6Qjs3nvvpV+/fvTp04c99tiDuXPnMnDgQHr06MEWW2zBX//618Vk+fLLL0tTDIHXflp55ZXLLU1RXgkL8JHQBRdcUJqs9euvvwbg008/Zdttt6VHjx5cdNFFpe3nzJnDbrvtRrdu3ejcuXOpXFOmTGHTTTflpJNOolu3bkydOpXLL7+cDh060KtXr0XKfgwYMIDhw4czbty40nIbnTt3Ls0HWNHfMrcfgBdeeIEtttiCzp07M3DgQH766ScA2rdvzyWX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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "# data to plot\n",
    "n_groups = 7\n",
    "No_Normalazation = (mse_logre_nonorm, mse_perc_nonorm, mse_svm_lk_nonorm, mse_svm_rbf_nonorm, mse_dtree_nonorm, mse_rforest_nonorm, mse_nnet_nonorm)\n",
    "Feature_Standardization = (mse_logre_norm, mse_perc_norm, mse_svm_lk_norm, mse_svm_rbf_norm, mse_dtree_norm, mse_rforest_norm, mse_nnet_norm)\n",
    "\n",
    "# create plot\n",
    "fig, ax = plt.subplots()\n",
    "index = np.arange(n_groups)\n",
    "bar_width = 0.25\n",
    "opacity = 0.8\n",
    "\n",
    "\n",
    "rects1 = plt.bar(index, No_Normalazation, bar_width,\n",
    "alpha=opacity,\n",
    "color='b',\n",
    "label='No Normalazation')\n",
    "\n",
    "rects2 = plt.bar(index + bar_width, Feature_Standardization, bar_width,\n",
    "alpha=opacity,\n",
    "color='g',\n",
    "label='Feature Standardization')\n",
    "\n",
    "plt.xlabel('Classifiers')\n",
    "plt.ylabel('Scores')\n",
    "plt.title('Digits Mean Squared Error Metrics')\n",
    "plt.xticks(index + bar_width, ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network'), rotation = 45)\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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qsrlKkaNGsX666/PxhtvXFURl8qCBQsYOnQoY8aMQRLNmjXjvvvuo1OnTouUplhWWrRowaxZs6r9/mHDhtGiRQtOPfVUzjvvPLbbbjt22mmnKh2j/HdZ3eMEQVD7FDLAdnPgAzP7CEDSvcCeQPnEbMcDDwK9CihLwcklK10WRo0aRb9+/aqkmObNm0ejRkv/GUeOHMm0adN44403aNCgAVOnTi0Lmq1pxVQVzAwzo0GDiifvF1xwQbWOW/67rO5xgiCofQppymsHTMnbnpraypDUDhgA3LCkA0k6QtJ4SeNzaXpKgQkTJtC7d2969OjBrrvuWpY9++abb6ZXr15suumm7L333vzwww+8/PLLjB49mtNOO41u3brx4Ycf0qdPH3LBxF999VXZDOz2229n3333pX///uyyyy7Mnj2bwYMH06tXLzbbbDP+8Y9/LCLL559/XpZiCLz208orr1xhaYqKSliAz4TOPvvssmStX3zxBQAff/wxW221Fb169eLcc88t6z9r1ix23HFHunfvTpcuXcrkmjx5MhtttBHHHHMM3bt3Z8qUKVx00UVssMEG7LTTTguV/Rg0aBAPPPAA48ePLyu30aVLl7J8gJX9LnPHAXj66afZbLPN6NKlC4MHD+ann34CoGPHjpx//vll8kYWiiAoDoVUTBVlKi2fZuIq4AwzW2KFOzO7ycx6mlnPNm3a1JR8NUru4d6tWzcGDBjA3LlzOf7443nggQeYMGECgwcP5uyzzwbgN7/5DePGjeP1119no4024pZbbmHrrbdmjz324LLLLmPixImss846S/y8sWPHcscddzBmzBguuugidthhB8aNG8czzzzDaaedxuzZsxfqv99++/HII4/QrVs3TjnlFF577TWACktTVFTCArzExpZbbsnrr7/Odtttx8033wzAiSeeyNFHH824ceNYffXVyz6zWbNmPPzww7z66qs888wznHLKKWXJWydNmsQhhxzCa6+9xldffcW9997La6+9xkMPPVSWZTyfnj17MnHiRCZOnEjfvn059dRTq/Vd/vjjjwwaNIiRI0fy5ptvMm/ePK6//vqy/aussgqvvvoqRx99NJdffnklfvkgCGqaQprypgJr5m23B6aV69MTuDeNflcBdpc0z8xGFVCuglDelPfWW2/x1ltvsfPOOwNeXbZt27Zl+8455xy+/fZbZs2axa677lrlz9t5551p1aoVAE888QSjR48ue5D++OOPfPrppwulzWnfvj2TJk1izJgxjBkzhh133JH777+fHXfccZFjDx8+nIcffhigrIRF69atadKkCf369QOgR48ePPnkkwC89NJLPPjgg4CX9cgVMjQzzjrrLJ5//nkaNGjAZ599VjbL6tChQ1lOvRdeeIEBAwbQvHlzwPPvLY777ruPV199lSeeeKJa3+WkSZPo1KkT66+/PgCHHnoo1157LUOHDgVc0eXO76GHHlrisYIgKAyFVEzjgPUkdQI+Aw4ADsrvYGadcv9Luh14tBSVUkWYGZtssgljx45dZN+gQYMYNWoUm266KbfffjvPPvtshcdo1KgRCxYsAFikjER+4lUz48EHH2SDDTZYokxNmzZlt912Y7fddmO11VZj1KhRiyimJZWwyC+pUb4cRUWlPEaMGMH06dOZMGECjRs3pmPHjmXHKp84dkmlQHK8/fbbnH/++Tz//PNlpT4q+13mWFpuyFzJjSi3EQTFo2CmPDObBxyHe9u9C9xnZm9LOkrSUYX63KywwQYbMH369DLFNHfuXN5++20Avv/+e9q2bcvcuXMXyrjdsmVLvv/++7Ltjh07MmHCBICy9ZGK2HXXXfnrX/9a9tDNmenyefXVV5k2zSesCxYs4I033qBDhw7AwqUpllTCYnH86le/WqisR46ZM2ey6qqr0rhxY5555hk++eSTCt+/3Xbb8fDDDzNnzhy+//57HnnkkUX6zJw5kwMOOIA777yTfHNuZb/LHBtuuCGTJ0/mgw8+AOCuu+5aphIiQRDUPAUte2FmjwGPlWur0NHBzAbV1OdmIVtxkyZNeOCBBzjhhBOYOXMm8+bNY+jQoWyyySZceOGFbLHFFnTo0IEuXbqUPUAPOOAAhgwZwvDhw3nggQc49dRT2W+//bjrrrvYYYcdFvtZ5557LkOHDqVr166YGR07duTRRx9dqM+XX37JkCFDyhb6N99887Ky6PmlKW699dbFlrBYHFdffTUHHXQQV1999ULVdAcOHEj//v3p2bMn3bp1Y8MNN6zw/d27d2f//fenW7dudOjQgW233XaRPqNGjeKTTz5hyJAhZW0TJ06s9HeZo1mzZtx2223su+++zJs3j169enHUUXV+nBQEJUWUvQiCKlKfrrcoexEsC1H2IgiCIKgThGIK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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "# data to plot\n",
    "n_groups = 7\n",
    "No_Normalazation = (hamloss_logre_nonorm, hamloss_perc_nonorm, hamloss_svm_lk_nonorm, hamloss_svm_rbf_nonorm, hamloss_dtree_nonorm, hamloss_rforest_nonorm, hamloss_nnet_nonorm)\n",
    "Feature_Standardization = (hamloss_logre_norm, hamloss_perc_norm, hamloss_svm_lk_norm, hamloss_svm_rbf_norm, hamloss_dtree_norm, hamloss_rforest_norm, hamloss_nnet_norm)\n",
    "\n",
    "# create plot\n",
    "fig, ax = plt.subplots()\n",
    "index = np.arange(n_groups)\n",
    "bar_width = 0.25\n",
    "opacity = 0.8\n",
    "\n",
    "\n",
    "rects1 = plt.bar(index, No_Normalazation, bar_width,\n",
    "alpha=opacity,\n",
    "color='b',\n",
    "label='No Normalazation')\n",
    "\n",
    "rects2 = plt.bar(index + bar_width, Feature_Standardization, bar_width,\n",
    "alpha=opacity,\n",
    "color='g',\n",
    "label='Feature Standardization')\n",
    "\n",
    "plt.xlabel('Classifiers')\n",
    "plt.ylabel('Scores')\n",
    "plt.title('Digits Hamming Loss Metrics')\n",
    "plt.xticks(index + bar_width, ('Logistic Regression', 'Perceptron', 'SVM Linear', 'SVM RBF', 'Decision Tree', 'Random Forests', 'Neural Network'), rotation = 45)\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
